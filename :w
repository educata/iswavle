---
title: 'TypeScript-ის ქომფაილერი'
description: 'TypeScript-ის გარემოს განხილვა'
keywords: 'ts, js, tsc, ტაიპსკრიპტი, ჯავასკრიპტი, node, npm'
---

როგორც წინა სტატიაში ვახსენეთ, ტაიპსკრიპტი არ ეშვება ბრაუზერში ან ნოუდის გარემოში. მისი კოდის
გასაშვებად საჭიროა სპეციალური ქომფაილერი, რომელიც ტაიპსკრიპტის კოდს გადააკეთებს ჯავასკრიპტის კოდად.

## ინსტალაცია

ტაიპსკრიპტის ქომფაილერის დასაინსტალირებლად დაგვჭირდება ნოუდის პაკეტის მენეჯერი npm.

npm გამოყენებისთვის საჭიროა [node-ის](https://nodejs.org/en) გარემოს ინსტალაცია.

ინსტალაციის შემდგომ ტერმინალში გაუშვით ბრძანებები:

```
node -v
npm -v
```

ორივე ბრძანებამ უნდა დაგიბრუნოთ ციფრები, რომლებიც შესაბამისი პროგრამების ვერსიებს გვიჩვენებენ.

შეგვიძლია უკვე ტაიპსკრიპტის გარემოს დაინსტალირებაც. ტერმინალში გაუშვით შემდგომი ბრძანება:

```
npm i -g typescript
```

განვიხილოთ გაშვებული ბრძანება:

- `npm` - ნოუდის პაკეტების მენეჯერი.
- `i` - ინსტალაცია (`install` ბრძანების შემოკლებული ვერსია).
- `-g` - დააინსტალიროს სისტემაში გლობალურად.
- `typescript` - პაკეტის დასახელება.

## კოდის გაშვება

შევქმნათ ფაილი `main.ts` და მასში ჩავწეროთ შემდგომი კოდი:

```ts
const message = 'Hello World';

console.log(message);
```

როგორც ვახსენეთ, პირდაპირ ტაიპსკრიპტის გაშვება ბრაუზერში არ ხდება, ამიტომაც საჭიროა მისი "გადათარგმნა"
ისეთ ენაზე, რასაც ბრაუზერი გაიგებს.

გადათარგმნისთვის გავუშვათ ტერმინალში შემდგომი ბრძანება:

```
tsc main.ts
```

ბრძანების გაშვების შემდგომ, შეიქმნება ახალი ფაილი `main.js`, სადაც ტაიპსკრიპტის კოდი ეწერება ჯავასკრიპტის სინტაქსით.

`main.js`-ის ფაილში კი მივიღეთ შემდგომი კოდი:

```js
var message = 'Hello World';
console.log(message);
```

`const` ჩვენს შემთხვევაში შენაცვლდა `var`-ით, რადგან ტაიპსკრიპტის ქომფაილერმა გამოიყენება ნაგულისხმევი [ECMAScript-ის](https://ecma-international.org/) ვერსია.
თუ ტაიპსკრიპტის ქომფაილერს არ მივაწვდით კონფიგურაციას, ნაგულისხმევად გამოიყენებს ECMAScript3-ს ან ECMAScript5-ს, რომლებსაც არ გააჩნიათ `const`-ის მხარდაჭერა.

:::info
ამდროისთვის (06/12/2024) ECMAScript-ის ბოლო ვერსია არის 6.
:::

## კონფიგურაცია

ქომფაილერს კონფიგურაცია შეიძლება მივაწოდოთ ორი გზით:

1. ტერმინალში ბრძანების გაშვების დროს.
2. კონფიგურაციის ფაილის გამოყენებით.

პირველი ვარიანტის შემთხვევაში, შეგვიძლია დამატებითი პარამეტრები გამოვიყენოთ ბრძანების გაშვების დროს.
მაგალითად გამოვიყენოთ ES6-ს (ECMAScript6) მოდული:

```
tsc main.ts --target ES6
```

ბრძანების გაშვების შემდგომ მივიღეთ ტაიპსკრიპტის გადათარმგნილი ჯავასკრიპტის კოდი უახლესი სტანდარტებით.

ყოველ ჯერზე დამატებითი პარამეტრების გამოყენება ტერმინალში დამღლელია, თანაც ბევრი პარამეტრის გამოყენებისას ბრძანებაც
დაიტვირთება, რაც არაპრაქტიკულია. უფრო მარტივი გზა არის, შევქმნათ კონფიგურაციის ფაილი სახელად `tsconfig.json`.

### tsconfig

ფოლდერში tsconfig.json-ის არსებობა მიუთითებს, რომ ეს ფოლდერი არის ტაიპსკრიპტის პროექტის root (ფესვი, პროექტის ამოსავალი წერტილი).
ამ ფაილში კონკრეტული ველების შევსებით შეგვიძლია შევცვალოთ ტაიპსკრიპტის ქომფაილერის ქცევა.

`tsconfig.json` შეიძლება ასე გამოიყურებოდეს:

```json
{
  "compilerOptions": {
    "module": "ES6",
    "removeComments": true,
    "noImplicitAny": true,
    "removeComments": true,
    "preserveConstEnums": true,
    "sourceMap": true
  },
  "files": ["main.ts"]
}
```

კონფიგურაციის ვარიანტებისთვის გაეცანით tsconfig-ის დოკუმენტაციას. ყველაზე საყურადღებო თავდაპირველად არის `compilerOptions`-ში `module`.
`files`-ს მასივი განსაზღვრავს, თუ რა ფაილები უნდა დააქომფაილოს ქომფაილერმა.

რადგან `files` მასივში მითითებულია `main.ts`, მხოლოდ `tsc`-ს ბრძანება არის საჭირო კოდის გადათარგმნისთვის.

```
tsc
```

მასივში შეგიძლიათ იმდენი ფაილი დაამატოთ, რამდენიც გაგიხარდებათ.

## შეჯამება

ამ სტატიაში განვიხილეთ ტაიპსკრიპტის ქომფაილერი და მისი კონფიგურაცია.

## გამოყენებული ლიტერატურა

- [tsc CLI Options](https://www.typescriptlang.org/docs/handbook/compiler-options.html)
- [What is a tsconfig.json](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html)
