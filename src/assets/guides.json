{"title":"ისწავლე ვებ დეველოპმენტი","toc":[],"codes":["let a = 2;\nlet b = 22;\n\nif (a > b) {\n  console.log('ა მეტია ბ-ზე');\n} else {\n  console.log('ბ მეტია ა-ზე');\n}","let age = 21;\n\nif (age > 18) {\n  console.log('თქვენ ხართ სრულწლოვანი');\n} else if (age === 18) {\n  console.log('გილოცავთ სრულწლოვნობას');\n} else {\n  console.log('თქვენ არ ხართ სრულწლოვანი');\n}","let age = 21;\n\nif (age === 18) {\n  console.log('გილოცავთ სრულწლოვნობას');\n} else if (age > 18) {\n  console.log('თქვენ ხართ სრულწლოვანი');\n} else {\n  console.log('თქვენ არ ხართ სრულწლოვანი');\n}","let x = 22;\nlet y = x > 10 ? x + 1 : x - 1;\nconsole.log(y); // 23","let dayOfWeek = new Date().toLocaleString('default', { weekday: 'long' });\nswitch (dayOfWeek) {\n  case 'Monday': {\n    console.log('დღეს ორშაბათია');\n    break;\n  }\n  case 'Tuesday': {\n    console.log('დღეს სამშაბათია');\n    break;\n  }\n  case 'Wednesday': {\n    console.log('დღეს ოთხშაბათია');\n    break;\n  }\n  case 'Thursday': {\n    console.log('დღეს ხუთშაბათია');\n    break;\n  }\n  case 'Friday': {\n    console.log('დღეს პარასკევია');\n    break;\n  }\n  case 'Saturday': {\n    console.log('დღეს შაბათია');\n    break;\n  }\n  case 'Sunday': {\n    console.log('დღეს კვირა');\n    break;\n  }\n  default: {\n    console.log('გადმოცემული მნიშვნელობა არ არის გათვალისწინებული');\n    break;\n  }\n}","case EXPRESSION: {\n  // მოქმედებები\n  break;\n}","// შემთხვევა როცა ინკრემენტი ოპერანდის შემდგომ წერია\nlet i = 0;\nconsole.log(i++); // 0\nconsole.log(i); // 1\n// შემთხვევა როცა ინკრემენტი ოპერანდამდე წერია\nlet j = 0;\nconsole.log(++j); // 1\nconsole.log(j); // 1\n// შემთხვევა როცა დეკრემენტი ოპერანდამდე წერია\nlet k = 0;\nconsole.log(k--); // 0\nconsole.log(k); // -1\n// შემთხვევა როცა დეკრემენტი ოპერანდამდე წერია\nlet l = 0;\nconsole.log(--l); // -1\nconsole.log(l); // -1","console.log('2' + '2'); // \"22\"","console.log('2' + '4' + '5'); // \"245\"\nconsole.log('2' + 4 + 5); // \"245\"\nconsole.log(4 + '2' + 5); // \"425\"\nconsole.log(4 + 5 + '2'); // \"92\"\nconsole.log('4' - 2); // 2\nconsole.log('8' / 2); // 4\nconsole.log('4' * 4); // 16\nconsole.log('4' ** 4); // 256\nconsole.log('2a' + 1); // \"2a1\"\nconsole.log('2a' - 1); // NaN","var projectName = 'EverREST'; // Camelcase\nlet organization_name = 'Educata'; // Snakecase\nconst DocumentationProject = 'Iswavle'; // Pascalcase","<script>\n  // JavaScript კოდი\n</script>","  <script src=\"./main.js\"></script>\n</body>","node \"failis_misamarti/failis_saxeli.js\"","// console.log('Hello world');","/*\n  console.log('Hello world');\n  console.log('Hello world from Educata');\n*/","const fruits = ['წითელი ვაშლი', 'ფორთოხალი', 'მწვანე ვაშლი', 'მარწყვი', 'ყურძენი'];\nconsole.log(fruits[0]); // 'წითელი ვაშლი'\nconsole.log(fruits[1]); // 'ფორთოხალი'\nconsole.log(fruits[2]); // 'მწვანე ვაშლი'\nconsole.log(fruits[3]); // 'მარწყვი'\nconsole.log(fruits[4]); // 'ყურძენი'\nconsole.log(fruits[5]); // undefined","const matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconsole.log(matrix); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(...numbers); // 1 2 3 4 5 6 7 8 9 10","const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(array.length);","const randomNumbers = [2, 22];\nconsole.log(randomNumbers); // [2, 22]\nrandomNumbers.push(1);\nconsole.log(randomNumbers); // [2, 22, 1]\nrandomNumbers.push(7, 77);\nconsole.log(randomNumbers); // [2, 22, 1, 7, 77]\nrandomNumbers.unshift(10);\nconsole.log(randomNumbers); // [10, 2, 22, 1, 7, 77]\nrandomNumbers.unshift(0, -3);\nconsole.log(randomNumbers); // [0, -3, 10, 2, 22, 1, 7, 77]","const randomNumbers = [2, 22, 222];\nconsole.log(randomNumbers.pop()); // 222\nconsole.log(randomNumbers); // [2, 22]\nconsole.log(randomNumbers.shift()); // 2\nconsole.log(randomNumbers); // [22]","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nconsole.log(randomNumbers.includes(22)); // true\nconsole.log(randomNumbers.includes(31)); // false\nconst cities = ['Tbilisi', 'Batumi', 'Kutaisi', 'Rustavi', 'Gori', 'Zugdidi', 'Poti', 'Kobuleti'];\nconsole.log(cities.includes('Batumi')); // true\nconsole.log(cities.includes('Borjomi')); // false","const web = ['HTML', 'CSS', 'SCSS', 'JS', 'TS', 'JS', 'Angular'];\nconsole.log(web.indexOf('JS')); // 3\nconsole.log(web.indexOf('JS', 4)); // 5\nconsole.log(web.lastIndexOf('JS')); // 5","const numbers = [2, 7, 22];\nconsole.log(numbers.findIndex((number) => number > 10)); // 2\nconsole.log(\n  numbers.findIndex(function (number) {\n    return number > 10;\n  }),\n);","const numbers = [2, 7, 22];\nconsole.log(numbers.find((number) => number > 10)); // 22","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nrandomNumbers.forEach((number, index, array) => {\n  console.log(number); // დალოგავს იმ რიცხვს, რომელზეც არის იტერაცია (მოქმდებები)\n  console.log(index); // დალოგავს იმ ელემენტის ინდექს, რომელზეც არის იტერაცია\n  console.log(array); // დალოგავს მთლიან მასივს რაზეც არის მოქმდებები\n});\nrandomNumbers.forEach((number, index) => {\n  console.log(index, number); // დალოგავს იმ რიცხვს და ინდექს, რომელზეც მიდის მოქმდებები\n});\nrandomNumbers.forEach((number) => {\n  console.log(number); // დალოგავს იმ რიცხვს, რომელზეც არის იტერაცია (მოქმდებები)\n});","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nconsole.log(randomNumbers.join()); // \"22, 7, 10, 30, 6, 11, 9\"\nconsole.log(randomNumbers.join('/')); // \"22/7/10/30/6/11/9\"\nconst projects = ['iswavle', 'EverREST', 'educata'];\nconsole.log(`Our projects ${projects.join()}`); // 'iswavle, EverREST, educata'\nconsole.log(`Our projects ${projects.join('')}`); // 'iswavleEverRESTeducata'\nconsole.log(`Our projects ${projects.join(' ')}`); // 'iswavle EverREST educata'\nconsole.log(`Our projects ${projects.join('|')}`); // 'iswavle|EverREST|educata'","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nconsole.log(randomNumbers.toString()); // '22,7,10,30,6,11,9'\nconst cities = ['Tbilisi', 'Batumi', 'Kutaisi', 'Rustavi', 'Gori', 'Zugdidi', 'Poti', 'Kobuleti'];\nconsole.log(cities.toString()); // 'Tbilisi,Batumi,Kutaisi,Rustavi,Gori,Zugdidi,Poti,Kobuleti'","const firstArray = [1, 2, 3, 4, 5];\nconst secondArray = [6, 7, 8, 9, 10];\nconst concatedArray = firstArray.concat(secondArray);\nconsole.log(concatedArray); // მსგავს ტიპად შეიქმნება ახალი მასივი პირველი მასივის და მეორე მასივის ელემენტებით","const randomNumbers = [1, 2, 3, 4, 5];\nconst squareRandomNumbers = randomNumbers.map((number) => number * number);\nconsole.log(squareRandomNumbers); // [1, 4, 9, 16, 25]","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nconst filteredEvenRandmoNumbers = randomNumbers.filter((number) => number % 2 === 0);\nconsole.log(filteredEvenRandmoNumbers); // [22, 10, 30, 6]\nconst cities = ['Tbilisi', 'Batumi', 'Kutaisi', 'Rustavi', 'Gori', 'Zugdidi', 'Poti', 'Kobuleti'];\nconst filteredCities = cities.filter((city) => city.length > 5);\nconsole.log(filteredCities); // ['Tbilisi', 'Batumi', 'Kutaisi', 'Rustavi', 'Zugdidi', 'Kobuleti']","const randomNumbers = [22, 7, 10, [30, [6, [11, [9]]]]];\nconsole.log(randomNumbers.flat()); // [22, 7, 10, 30, Array [6, Array [11, Array [9]]]]\nconsole.log(randomNumbers.flat(2)); // [22, 7, 10, 30, 6, Array [11, Array [9]]]\nconsole.log(randomNumbers.flat(3)); // [22, 7, 10, 30, 6, 11, Array [9]]\nconsole.log(randomNumbers.flat(Infinity)); // [22, 7, 10, 30, 6, 11, 9]","const nestedArray = [\n  [1, 2],\n  [3, 4],\n  [5, 6],\n];\nconst flattenedArray = nestedArray.flatMap((innerArray) => innerArray.map((number) => number * 2));\nconsole.log(flattenedArray); // [2, 4, 6, 8, 10, 12]","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nconsole.log(randomNumbers.slice(2)); // [10, 30, 6, 11, 9]\nconsole.log(randomNumbers.slice(2, 4)); // [10, 30]\nconsole.log(randomNumbers.slice(-3, -1)); // [6, 11]","const months = ['იანვარი', 'მარტი', 'აპრილი'];\nmonths.splice(1, 0, 'თებერვალი'); // 1 ინდექსის შემდგომ წავშალოთ 0 ელემენტი და დავამატოთ 'თებერვალი'\nconsole.log(months); // ['იანვარი', 'თებერვალი', 'მარტი', 'აპრილი']\nmonths.splice(3, 1); // 3 ინდექსის შემდგომ წავშალოთ 1 ელემენტი\nconsole.log(months); // ['იანვარი', 'თებერვალი', 'მარტი']","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nconsole.log(randomNumbers.reverse()); // [9, 11, 6, 30, 10, 7, 22]\nconst cities = ['Tbilisi', 'Batumi', 'Kutaisi', 'Rustavi', 'Gori', 'Zugdidi', 'Poti', 'Kobuleti'];\nconsole.log(cities.reverse()); // ['Kobuleti', 'Poti', 'Zugdidi', 'Gori', 'Rustavi', 'Kutaisi', 'Batumi', 'Tbilisi']","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nrandomNumbers.sort();\nconsole.log(randomNumbers); // [10, 11, 22, 30, 6, 7, 9]\nconst cities = ['Tbilisi', 'Batumi', 'Kutaisi', 'Rustavi', 'Gori', 'Zugdidi', 'Poti', 'Kobuleti'];\ncities.sort();\nconsole.log(cities); // [\"Batumi\", \"Gori\", \"Kobuleti\", \"Kutaisi\", \"Poti\", \"Rustavi\", \"Tbilisi\", \"Zugdidi\"]\n\nconst randomNumbersArray = [1, 2, 10, 40, 30, 5];\nconsole.log(randomNumbersArray.toSorted()); // [1, 10, 2, 30, 40, 5]\nconst georgianCities = ['Tbilisi', 'Batumi', 'Kutaisi', 'Rustavi', 'Gori', 'Zugdidi', 'Poti', 'Kobuleti'];\nconsole.log(georgianCities.toSorted()); // [\"Batumi\", \"Gori\", \"Kobuleti\", \"Kutaisi\", \"Poti\", \"Rustavi\", \"Tbilisi\", \"Zugdidi\"]","const randomNumbers = [22, 7, 10, 30, 6, 11, 9];\nconsole.log(randomNumbers.toSorted((a, b) => a - b)); // [6, 7, 9, 10, 11, 22, 30] ზრდადობით\nconsole.log(randomNumbers.toSorted((a, b) => b - a)); // [30, 22, 11, 10, 9, 7, 6] კლებადობით","let a = 1;\nlet b = 2;\ndebugger;\nconsole.log(a + b);\nconsole.log(a * b);","let anyValue = 22;\nanyValue = 'ტესტ';\nanyValue = true;\nanyValue = null;","console.log(22 / +0); // Infinity\nconsole.log(22 / -0); // -Infinity","const name = 'educata';\nconsole.log(name[0]); // e\nconsole.log(name[1]); // d\nconsole.log(name.length); // 7","function square(number) {\n  return number * number;\n}","function square(number) {\n  return number * number;\n}\n\nconsole.log(square(2)); // 4\nconsole.log(square(4)); // 16\nconsole.log(square(8)); // 64\nconsole.log(square()); // NaN","function logName(name = 'educata') {\n  console.log(`სასწავლებლის სახელია: ${name}`);\n}\n\nlogName(); // 'სასწავლებლის სახელია: educata'\nlogName('EverREST'); // 'სასწავლებლის სახელია: EverREST'","function sum(a, b = 22) {\n  return a + b;\n}\n\nconsole.log(sum()); // NaN\nconsole.log(sum(1)); // 23\nconsole.log(sum(2, 2)); // 4","const square = function (number) {\n  return number * number;\n};","console.log(square(5)); // ReferenceError: Cannot access 'square' before initialization\n\nconst square = function (number) {\n  return number * number;\n};","const square = function (number) {\n  return number * number;\n};\nconsole.log(square(5)); // 25","console.log(square(16)); // 256\n\nfunction square(number) {\n  return number * number;\n}\n\nconsole.log(square(32)); // 1024","// გრძელი if/else ჩაწერით\nfunction pow(x, n) {\n  if (n === 1) {\n    return x;\n  } else {\n    return x * pow(x, n - 1);\n  }\n}\n// ტერნარული ოპერატორის ჩანაწერით\nfunction powTernary(x, n) {\n  return n === 1 ? x : x * powTernary(x, n - 1);\n}\n// შედეგი ორივე ფუნქციისთვის ერთი და იგივე არის მაგრამ ტერნარული ოპერატორით ჩანაწერი უფრო მოკლე არის და არ მოითხოვს ზედმეტი if/else ჩანაწერის ბლოკებს\nconsole.log(pow(2, 10)); // 1024\nconsole.log(powTernary(2, 10)); // 1024","() => ფუნქციის შედეგი\n\nparam => ფუნქციის შედეგი\n\n(param) => ფუნქციის შედეგი\n\n(param1, paramN) => ფუნქციის შედეგი\n\n() => {\n  ფუნქციის კოდი\n}\n\nparam => {\n  ფუნქციის კოდი\n}\n\n(param1, paramN) => {\n  ფუნქციის კოდი\n}","const printHere = () => {\n  console.log('Here');\n};\n\nprintHere(); // დაილოგება \"Here\"\n// შემდგომ სტატიებში იქნება უფრო მეტი მაგალითი განხილული","let i = 0; // საწყისი მნიშვნელობა, მეორე ნაირად დამთვლელი\n// ციკლმა იმუშავოს მანამ სანამ i ცვლადი ნაკლებია 100-ზე\nwhile (i < 100) {\n  console.log(i); // გამოგვაქვს მისი მნიშვნელობა კონკრეტული იტერაციის დროს\n  i++; // ბიჯი იზრდება 1-ით | იგივე ინკრემენტი\n}","let i = 100;\nwhile (i < 100) {\n  console.log(i);\n  i++;\n}\n\nlet j = 100;\ndo {\n  console.log(j);\n  j++;\n} while (j < 100);","for (let i = 0; i < 100; i++) {\n  // i შეიცვლება 0 დან 100 მდე\n  console.log(i); // ილოგება i მნიშვნელობა\n}\nconsole.log(i); // undefined","let i;\nfor (i = 10; i < 20; i++) {\n  console.log(i);\n}\nconsole.log(i); // 20","for (let i = 0; i < 10; i += 2) {\n  console.log(i);\n}","for (let i = 0; i < 10; ) {\n  let randomNumber = Math.round(Math.random() * 100);\n  if (randomNumber % 2 === 0) {\n    console.log(randomNumber);\n    i++;\n  }\n  console.log('იტერაცია დასრულდა');\n}","const projects = {\n  company: 'iswavle',\n  education: 'iswavle',\n  restAPI: 'EverREST',\n};\n\nfor (let i = 0; i < 3; i++) {\n  console.log(projects[i]); // undefined ყველა ჯერზე\n}\n\nfor (const item in projects) {\n  console.log(item, projects[item]); // გასაღები(key) და მნიშვნელობა(property) დაილოგება ყოველ ჯერზე\n}","const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor (let i = 0; i < numbers.length; i++) {\n  let number = numbers[i]; // პირდაპირ ლოგში დაწერაც შეიძლება თუმცა უკეთესი შედარებისთვის სხვა მაგალითებისთვის, ცალკე ცვლადში გავწეროთ\n  console.log(number);\n}\n\nfor (const key in numbers) {\n  let number = numbers[key];\n  console.log(number); // პირდაპირ ლოგში დაწერაც შეიძლება თუმცა უკეთესი შედარებისთვის სხვა მაგალითებისთვის, ცალკე ცვლადში გავწეროთ\n}\n\nfor (const number of numbers) {\n  console.log(number);\n}\n\nfor (const [i, number] of numbers.entries()) {\n  console.log(number, i); // დაილოგება რიცხვი და i მნიშვნელობაც თუ მერამდენე იტერაციაც არის\n}","// გავუშვათ უსასრულო ციკლი და შევწყვიტოთ მე-1000 იტერაციაზე\nlet index = 0;\nwhile (true) {\n  console.log(index++); // დავლოგოთ index ცვლადი და გავზარდოთ 1-ით\n  if (index >= 1000) {\n    // თუ index ცვლადი მეტია ან ტოლი 1000 ზე მაშინ შევწყვიტოთ ციკლი\n    break;\n  }\n}\n\nindex = 0; // გავანულოთ შემდგომი ციკლისთვის\n// იგივე მოქმედებები შევასრულოთ do...while ციკლშიც\ndo {\n  console.log(index++); // დავლოგოთ index ცვლადი და გავზარდოთ 1-ით\n  if (index >= 1000) {\n    // თუ index ცვლადი მეტია ან ტოლი 1000 ზე მაშინ შევწყვიტოთ ციკლი\n    break;\n  }\n} while (true);\n\nfor (let i = 0; i < 100; i++) {\n  if (i === 50) {\n    // შევწყვიტოთ ციკლი 50 იტერაციის შემდგომ\n    break;\n  }\n  console.log(i);\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor (const [i, number] of numbers.entries()) {\n  if (i === 2) {\n    // თუ ინდექსი არის 2ს ტოლი შევწყვიტოთ ციკლი\n    break;\n  }\n  console.log(number); // დავლოგოთ რიცხვი\n}","let i = 0;\nwhile (i < 100) {\n  i++; // i გავზარდოთ 1-ით\n  if (i % 3 === 0) {\n    // თუ 3-ს ჯერადი იტერაცია არის გამოვტოვოთ ეს იტერაცია\n    continue;\n  }\n  console.log(i); // დავლოგოთ i\n}\n\ni = 0; // გავანულოთ შემდგომი ციკლისთვის\n// იგივე მოქმედებები შევასრულოთ do...while ციკლშიც\ndo {\n  i++; // i გავზარდოთ 1-ით\n  if (i % 3 === 0) {\n    // თუ 3-ს ჯერადი იტერაცია არის გამოვტოვოთ ეს იტერაცია\n    continue;\n  }\n  console.log(i); // დავლოგოთ i\n} while (i < 100);\n\nfor (let i = 0; i < 100; i++) {\n  if (i % 2 === 0) {\n    // თუ i არის ლუწი გამოვტოვოთ ეს იტერაცია\n    continue;\n  }\n  console.log(i); // დავლოგოთ ყოველი i მნიშვნელობა\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor (const [i, number] of numbers.entries()) {\n  if (i % 2 !== 0) {\n    // თუ ინდექსი არის კენტი გამოვტოვოთ ეს იტერაცია\n    continue;\n  }\n  console.log(number); // დავლოგოთ რიცხვი\n}","function getRandomRGBColor() {\n  const r = Math.floor(Math.random() * 256);\n  const g = Math.floor(Math.random() * 256);\n  const b = Math.floor(Math.random() * 256);\n  return `rgb(${r}, ${g}, ${b})`;\n}\n\nconsole.log(getRandomRGBColor()); // \"rgb(0, 130, 230)\"\nconsole.log(getRandomRGBColor()); // \"rgb(27, 155, 255)\"","const foods = ['ხინკალი', 'ხაჭაპური', 'მწვადი', 'საცივი', 'ელარჯი', 'ფხალი', 'ჩიხირთმა', 'ხარჩო', 'ლობიო'];\nconst randomIndex = Math.floor(Math.random() * foods.length); // 2\nconsole.log(foods[randomIndex]); // 'მწვადი'","const foods = ['ხინკალი', 'ხაჭაპური', 'მწვადი', 'საცივი', 'ელარჯი', 'ფხალი', 'ჩიხირთმა', 'ხარჩო', 'ლობიო'];\n\nfunction getRandomFoodsForWeek(array) {\n  const result = [];\n  for (let i = 0; i < 7; ) {\n    const randomIndex = Math.floor(Math.random() * array.length);\n    const randomFood = array[randomIndex];\n    if (!result.includes(randomFood)) {\n      result.push(randomFood);\n      i++;\n    }\n  }\n  return result;\n}\n\nconsole.log(getRandomFoodsForWeek(foods)); // [\"ჩიხირთმა\", \"ხინკალი\", \"ხარჩო\", \"საცივი\", \"ელარჯი\", \"ლობიო\", \"მწვადი\"]\nconsole.log(getRandomFoodsForWeek(foods)); // [\"ხინკალი\", \"ფხალი\", \"ჩიხირთმა\", \"ლობიო\", \"საცივი\", \"მწვადი\", \"ხარჩო\"]","console.log(Number(undefined)); // NaN\nconsole.log(Number(null)); // 0\nconsole.log(Number(true)); // 1\nconsole.log(Number(false)); // 0\nconsole.log(Number('22')); // 22\nconsole.log(Number('22e')); // NaN\nconsole.log(Number('22e3')); // 22000","console.log(Number.MAX_SAFE_INTEGER); // 9007199254740991\nconsole.log(Number.MAX_SAFE_INTEGER + 1); // 9007199254740992\nconsole.log(Number.MAX_SAFE_INTEGER + 2); // 9007199254740992\nconsole.log(Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2); // true","let someNumber = 2;\nconsole.log((2).toFixed(2)); // პროტოტიპის მეთოდი\nconsole.log((2).toFixed(2)); // პროტოტიპის მეთოდი\nconsole.log(someNumber.toFixed(2)); // პროტოტიპის მეთოდი\nconsole.log(Number.isNaN(2)); // ობიექტის მეთოდი","function getHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}","function rgbToHex(color) {\n  const rgbValues = color.match(/\\d+/g);\n  if (!rgbValues || rgbValues.length !== 3) {\n    // არასწორი rgb ფორმატი\n    return null;\n  }\n  const hexValues = rgbValues.map((value) => {\n    const hex = Number.parseInt(value).toString(16);\n    return hex.length === 1 ? `0${hex}` : hex;\n  });\n  return `#${hexValues.join('')}`;\n}\n\nfunction hexToRgb(color) {\n  const hexValues = color.match(/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i);\n  if (!hexValues || hexValues.length !== 4) {\n    // არასწორი hex ფორმატი\n    return null;\n  }\n  return `rgb(${parseInt(hexValues[1], 16)},${parseInt(hexValues[2], 16)},${parseInt(hexValues[3], 16)})`;\n}\n\nconsole.log(rgbToHex('rgb(10,20,30)')); // \"#0a141e\"\nconsole.log(hexToRgb('#0a141e')); // \"rgb(10,20,30)\"","const user = {};\nconst secondUser = new Object();\n// ორივე შემთხვევაში შეიქმნება ახალი ობიექტები","const project = {\n  name: 'educata',\n};\n\nconsole.log(project); // { name: 'educata' }\nconsole.log(project.name); // 'educata'\n\nproject.name = 'Educata';\nproject.title = 'EverREST';\nconsole.log(project); // { name: 'Educata', title: 'EverREST' }","const project = {\n  name: 'educata',\n};\n\nconsole.log(project); // { name: 'educata' }\nconsole.log(project['name']); // 'educata'\n\nproject['name'] = 'Educata';\nproject['title'] = 'EverREST';\nconsole.log(project); // { name: 'Educata', title: 'EverREST' }","const person = {\n  name: 'educata',\n  projects: ['EverREST', 'iswavle'],\n  logName() {\n    console.log(this); // { name: 'educata', projects: ['EverREST', 'iswavle'] }\n  },\n};","const project = {\n  name: 'educata',\n  logName: function() {\n    console.log(this.name); // 'educata'\n  }\n  logNameWithArrowFn: () => {\n    console.log(this.name); // undefined\n  },\n  logNameMethod() {\n    console.log(this.name); // 'educata'\n  }\n};","let age = 21;\nlet age2 = age;\nconsole.log(age === age); // true\n\nconst project = {\n  name: 'educata',\n};\nconst project1 = project;\nconsole.log(project === project1); // true","const project = {\n  name: 'educata',\n};\nconst project1 = project;\nconsole.log(project); // { name: 'educata' }\nconsole.log(project1); // { name: 'educata' }\nproject1.name = 'iswavle';\nconsole.log(project); // { name: 'iswavle' }\nconsole.log(project1); // { name: 'iswavle' }","const project = {\n  name: 'educata',\n};\nconst assignWay = Object.assign({}, project);\nassignWay.name = 'iswavle';\nconsole.log(project); // { name: 'educata' }\nconsole.log(assignWay); // { name: 'iswavle' }\nconst spreadWay = { ...project };\nspreadWay.name = 'EverREST';\nconsole.log(project); // { name: 'educata' }\nconsole.log(spreadWay); // { name: 'EverREST' }\nconst jsonWay = JSON.parse(JSON.stringify(project));\njsonWay.name = 'Educata tutorials';\nconsole.log(project); // { name: 'educata' }\nconsole.log(jsonWay); // { name: 'Educata tutorials' }","body {\n  margin: 0;\n}","const regex = /pattern/flags;\nconst regexWithObject = new RegExp('pattern', 'flags');","const phoneNumberRegex = /\\+9955\\d{8}$/;\nconsole.log(phoneNumberRegex.test('+995512345678')); // true\nconsole.log(phoneNumberRegex.test('+9955123456789')); // false","const nameRegex = /^[a-zA-Z]{2,25}$/;\nconsole.log(nameRegex.test('konstantine')); // true\nconsole.log(nameRegex.test('pridoni')); // true\nconsole.log(nameRegex.test('satesto1')); // false\nconsole.log(nameRegex.test('satesto_')); // false","const georgianNameRegex = /^[ა-ჰ]{2,25}$/;\nconsole.log(georgianNameRegex.test('კონსტანტინე')); // true\nconsole.log(georgianNameRegex.test('ფრიდონი')); // true\nconsole.log(georgianNameRegex.test('ი')); // false\nconsole.log(georgianNameRegex.test('pridoni')); // false\nconsole.log(georgianNameRegex.test('konstantine_')); // false","let string1 = \"პრიმიტიული სტრინგი 1\";\nlet string2 = 'პრიმიტიული სტრინგი 2';\nlet string3 = `პრიმიტიული სტრინგი 3`;\nlet string4 = String('ობიექტის კონსტრუქტორიდან შექმნილი სტრინგი, new გარეშე');\nlet string5 = new String('ობიექტის კონსტრუქტორიდან შექმნილი სტრინგი, new გამოყენებით');\n\nconsole.log(typeof string1); // \"string\"\nconsole.log(typeof string2); // \"string\"\nconsole.log(typeof string3); // \"string\"\nconsole.log(typeof string4); // \"string\"\nconsole.log(typeof string5); // \"object\"","console.log(String('სატესტო')); // 'სატესტო'\nconsole.log(String(undefined)); // 'undefined'\nconsole.log(String(null)); // 'null'\nconsole.log(String(true)); // 'true'\nconsole.log(String(false)); // 'false'\nconsole.log(String(16)); // '16'\nconsole.log(String(22)); // '22'\nconsole.log(String(BigInt(22))); // '22'","const text = 'iswavle.com არის უფასო სასწავლებელი პლატფორმა';\n\nconsole.log(text.charAt(2)); // 'w'\nconsole.log(text[2]); // 'w'","console.log('1' == 1); // true\nconsole.log('a' == 'a'); // true\nconsole.log('a' == 'A'); // false\nconsole.log('1' === 1); // false\nconsole.log('a' === 'a'); // true\nconsole.log('a' === 'A'); // false","console.log('a' > 'A'); // true\nconsole.log('abc' > 'abd'); // false","let text = `დღევანდელი თარიღი არის: ${new Date().toDateString()}`;\nconsole.log(text); // 'Tue Jan 16 2024'\n\nfor (let i = 1; i <= 100; i++) {\n  console.log(`${i}) იტერაცია`); // i ყოველ ჯერზე შეიცვლება 1 დან 100 მდე\n}","console.log(String.fromCharCode(4312));\nconsole.log(String.fromCharCode(4321));\nconsole.log(String.fromCharCode(4332));\nconsole.log(String.fromCharCode(4304));\nconsole.log(String.fromCharCode(4309));\nconsole.log(String.fromCharCode(4314));\nconsole.log(String.fromCharCode(4308));","console.log(String.fromCodePoint(65)); // 'A'\nconsole.log(String.fromCodePoint(4312)); // 'ი'","console.log(String.fromCharCode(65, 66, 128516)); // AB\\uD83D\\uDE04\nconsole.log(String.fromCodePoint(65, 66, 128516)); // \"AB😄\"","let text = 'რაღაც სატესტო ტექსტი';\nconsole.log(text.length); // 20","let text = 'რაღაც სატესტო ტექსტი';\nconsole.log(text.at(1)); // 'ა'\nconsole.log(text.at(-1)); // 'ი'","let text = 'რაღაც სატესტო ტექსტი';\nconsole.log(text.charAt(1)); // 'ა'\nconsole.log(text.charAt(-1)); // '' ცარიელი მნიშვნელობა","let text = 'რაღაც';\nconsole.log(text.concat(' სატესტო', ' ', 'ტექსტი')); // 'რაღაც სატესტო ტექსტი'\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(''.concat(...numbers)); // '12345678910'","let text = 'Hello World!';\nconsole.log(text.endsWith('World!')); // true\n\nlet secondText = 'ანგულარი საუკეთესო SPA ფრეიმვორკია';\nconsole.log(secondText.endsWith('ფრეიმვორკია', 34)); // true","let text = 'ვებგვერდისთვის ძირითადად გვჭირდება: HTML, CSS, JavaScript. Angular არის JavaScript-ის ფრეიმვორკი';\nconsole.log(text.includes('HTML')); // true\nconsole.log(text.includes('JavaScript', 58)); // true\nconsole.log(text.includes('HTML', 58)); // true","console.log('კი '.repeat(2)); // 'კი კი '","let text = 'დღეს ცუდი ამინდია';\nconsole.log(text.replace('ცუდი', 'კარგი')); // 'დღეს კარგი ამინდია'\n\nlet secondText = 'იყო x და გახდა y';\nconsole.log(secondText.replace(/[xy]/g, (char) => (char === 'x' ? 500 : 1000))); // 'იყო 500 და გახდა 1000'","let text = 'ორშაბათი სამშაბათი ოთხშაბათი ხუთშაბათი';\nconsole.log(text.replaceAll('შაბათი', '')); // 'ორ სამ ოთხ ხუთ'\nconsole.log(text.replaceAll(/შაბათი/g, '')); // 'ორ სამ ოთხ ხუთ'","let text = 'hello world';\nconsole.log(text.indexOf('hello')); // 0\nconsole.log(text.indexOf('world')); // 6\nconsole.log(text.indexOf('o')); // 4\nconsole.log(text.indexOf('o', 5)); // 7","let text = 'hello world';\nconsole.log(text.indexOf('o')); // 4\nconsole.log(text.indexOf('o', 5)); // 7\nconsole.log(text.lastIndexOf('o')); // 7","let text = 'ვებგვერდისთვის ძირითადად გვჭირდება: HTML, CSS, JavaScript.';\nconsole.log(text.search('CSS')); // 42\nconsole.log(text.search('SCSS')); // -1\nconsole.log(text.search(/javascript/i)); // 47","let text = 'ვებგვერდისთვის ძირითადად გვჭირდება: HTML, CSS, JavaScript.';\nconsole.log(text.split()); // ['ვებგვერდისთვის ძირითადად გვჭირდება: HTML, CSS, JavaScript.']\nconsole.log(text.split('')); // [\"ვ\", \"ე\", \"ბ\", \"გ\", \"ვ\", \"ე\", ... ] ყოველი სიმბოლო გადადის რიგრიგობით მასივში\nconsole.log(text.split(' ')); // ['ვებგვერდისთვის', 'ძირითადად', 'გვჭირდება:', 'HTML,', 'CSS,', 'JavaScript.']\nconsole.log(text.split(':')); // ['ვებგვერდისთვის ძირითადად გვჭირდება', ' HTML, CSS, JavaScript.']","let text = 'ვებგვერდისთვის ძირითადად გვჭირდება: HTML, CSS, JavaScript.';\nconsole.log(text.slice(15)); // 'ძირითადად გვჭირდება: HTML, CSS, JavaScript.'\nconsole.log(text.slice(15, 34)); // 'ძირითადად გვჭირდება'\nconsole.log(text.slice(-22)); // 'HTML, CSS, JavaScript.'\nconsole.log(text.slice(-22, -13)); // 'HTML, CSS'","let text = 'ვებგვერდისთვის ძირითადად გვჭირდება: HTML, CSS, JavaScript.';\nconsole.log(text.substring(15)); // 'ძირითადად გვჭირდება: HTML, CSS, JavaScript.'\nconsole.log(text.substring(15, 34)); // 'ძირითადად გვჭირდება'\nconsole.log(text.substring(-22)); // 'ვებგვერდისთვის ძირითადად გვჭირდება: HTML, CSS, JavaScript.'\nconsole.log(text.substring(-22, -13)); // ''","console.log('Hello World!'.toLowerCase()); // 'hello world!'","console.log('Hello World!'.toUpperCase()); // 'HELLO WORLD!'","const stringObject = new String('სატესტო');\nconsole.log(stringObject); // String { 'სატესტო' }\nconsole.log(stringObject.toString()); // 'სატესტო'","let number = 2;\nconsole.log(number.toString(2)); // '10' რადგან ორობითში 2 არის 10\nnumber = 17;\nconsole.log(number.toString(16)); // '11' რადგან თექვსმეტობითში 17 არის 11","let text = '      რაღაც ტექსტი      ';\nconsole.log(text.length); // 24\nconsole.log(text.trim()); // 'რაღაც ტექსტი'\nconsole.log(text.trim().length); // 12","let text = '      რაღაც ტექსტი      '; // დასაწყისშიც და დასასრულშიც 6 ზედმეტი space არის მოთავსებული\nconsole.log(text.trimStart()); // 'რაღაც ტექსტი      '\nconsole.log(text.trimStart().length); // 18\nconsole.log(text.trimEnd()); // '      რაღაც ტექსტი'\nconsole.log(text.trimEnd().length); // 18","class Point {\n  x: number;\n  y: number;\n}\n\nconst pt = new Point();\npt.x = 0; // valid\npt.y = false; // error","class BadGreeter {\n  name: string; // Error: Property 'name' has no initializer and is not definitely assigned in the constructor.\n}","class GoodGreeter {\n  name: string;\n\n  constructor() {\n    this.name = \"hello\";\n  }\n}","class Hero {\n  readonly name: string = \"Tariel\";\n\n  constructor(otherName?: string) {\n    if (otherName !== undefined) {\n      this.name = otherName;\n    }\n  }\n\n  err() {\n    this.name = \"Avtandil\"; // can't modify\n  }\n}\n\nconst g = new Hero();\ng.name = \"Pridon\"; // can't modify here either","class Greeter {\n  public greet() {\n    console.log(\"hi!\");\n  }\n}\nconst g = new Greeter();\ng.greet();","class Greeter {\n  public greet() {\n    console.log(\"Hello, \" + this.getName());\n  }\n\n  protected getName() {\n    return \"hi\";\n  }\n}\n\nclass SpecialGreeter extends Greeter {\n  public howdy() {\n    // protected member visible here\n    console.log(\"Howdy, \" + this.getName());\n  }\n}\n\nconst g = new SpecialGreeter();\ng.greet(); // visible public member\ng.getName(); // protected member not visible here","class UnknownKnight {\n  private name = \"Tariel\";\n  public crying = true;\n\n  introduce() {\n    console.log(this.name); // visible\n  }\n}\n\nconst someone = new UnknownKnight();\nconsole.log(someone.crying); // visible\nconsole.log(someone.name); // error\n\nclass King extends UnknownKnight {\n  showName() {\n    console.log(this.name); // error\n  }\n}","npm install -g typescript","function log(text: string): void {\n  console.log(text);\n}\n\nconst hello: string = \"Hello world!\";\n\nlog(hello);","tsc main.ts","function log(text: number): void {\n  console.log(text);\n}\n\nconst hello: string = \"Hello world!\";\n\nlog(hello);","tsc main.ts","{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"sourceMap\": true\n  },\n  \"files\": [\n    \"core.ts\",\n    \"sys.ts\",\n    \"types.ts\",\n    \"scanner.ts\",\n    \"parser.ts\",\n    \"utilities.ts\",\n    \"binder.ts\",\n    \"checker.ts\",\n    \"emitter.ts\",\n    \"program.ts\",\n    \"commandLineParser.ts\",\n    \"tsc.ts\",\n    \"diagnosticInformationMap.generated.ts\"\n  ]\n}","const myStr = \"hello\"; // string\nconst anotherStr = \"1234\"; // string\nconst myNum = 74; // number\nconst anotherNum = -12.54; // number\nlet myBool = true; // boolean\n\nfunction greet() {\n  return \"Hello there!\"; // ტაიპსკრიპტი მიხვდება, რომ ფუნქცია string-ს აბრუნებს\n}\n\nmyBool = \"a string\"; // ეს გამოიწვევს ერორს, რადგან boolean ტიპის ცვლადში ვინახავთ string-ს.","const user = {\n  id: 588,\n  name: \"John\",\n};\n\nuser.id = \"98\"; // გამოიწვევს ერორს, რადგან user.id უნდა იყოს number და არა string","const typescript: string = \"cool\"; // ცვლადი მხოლოდ string იქნება\nlet myBool: boolean; // ცვლადი მხოლოდ boolean იქნება\n\nif (typescript === \"cool\") {\n  myBool = true; // ვალიდურია\n}\n\nlet fluidVar: any = \"hello\";\nfluidVar = 99;\nfluidVar = false;\nfluidVar = { name: \"john\" };","const myArr: string[] = [\"one\"];\n\nmyArr.push(\"two\");\nmyArr.push(3); // გამოიწვევს ერორს","function multiply(a: number, b: number): number {\n  return a * b;\n}\n\nmultiply(12, \"wrong\"); // გამოიწვევს ერორს, რადგან b არგუმენტად არ ვაწვდით number ტიპს","function log(text?: number): void {\n  if (text) {\n    console.log(text);\n  } else {\n    console.log(\"No text was provided\");\n  }\n}\n\nlog(); // არ გამოიწვევს ერორს და ამობეჭდავს \"No text was provided\".","let myVar: string | number | { id: number } = 85;\n\nmyVar = { id: 999 }; // ვალიდურია\nmyVar = { name: \"John\", lastName: \"Doe\" }; // გამოიწვევს ერორს","interface User {\n  name: string;\n  id: number;\n  email?: string;\n}\n\nconst someUser: User = {\n  name: \"John\",\n  id: 0,\n  // email-ის არ არსებობა არ გამოიწვევს ერორს.\n};","interface User {\n  name: string;\n  id: number;\n  email?: string;\n}\n\ninterface Admin extends User {\n  canEdit: boolean;\n}\n\nconst admin: Admin = {\n  name: \"John\",\n  id: 0,\n  canEdit: true,\n};","let myTuple: [number, string, boolean] = [4, \"Tuple this, tuple that\", true];\n\nmyTuple[1] = false; // გამოიწვევს ერორს, რადგან string-ს ვანაცვლებთ boolean-ით.","let myTuple: [number, string, boolean] = [4, \"Tuple this, tuple that\", true];\n\nconst [a, b, c] = myTuple;","h1 {\n  color: red;\n  font-size: 40px;\n}","<!doctype html>\n<html lang=\"ka-GE\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>ჩემი ვებ გვერდი</title>\n  </head>\n  <style>\n    h1 {\n      color: red;\n      font-size: 40px;\n    }\n  </style>\n  <body>\n    <h1>CSS-ის გარეშე რა გვეშველებოდა?</h1>\n    <p>კასკადური სტილთა ფურცლები (Cascading Style Sheets), იგივე CSS, არის ენა, რომელიც პასუხისმგებელია ვებსაიტის ელემენტების გარეგნობასა და განლაგებაზე</p>\n  </body>\n</html>","h1 {\n  color: red;\n  font-size: 40px;\n}","<!doctype html>\n<html lang=\"ka-GE\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <!-- აკავშირებს სტილების ფაილს დოკუმენტთან -->\n    <link rel=\"stylesheet\" src=\"style.css\" />\n    <title>ჩემი ვებ გვერდი</title>\n  </head>\n  <body>\n    <h1>CSS-ის გარეშე რა გვეშველებოდა?</h1>\n    <p>კასკადური სტილთა ფურცლები (Cascading Style Sheets), იგივე CSS, არის ენა, რომელიც პასუხისმგებელია ვებსაიტის ელემენტების გარეგნობასა და განლაგებაზე</p>\n  </body>\n</html>","<h1 style=\"color: red; font-size: 40px\">CSS-ის გარეშე რა გვეშველებოდა?</h1>","<h1>ისწავლეთ ვებ დეველოპმენტი</h1>\n<p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Delectus, quos?</p>\n<p id=\"special\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Delectus, quos?</p>\n<p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Delectus, quos?</p>\n<p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Delectus, quos?</p>","h1 {\n  color: red;\n  font-size: 40px;\n}\n\n#special {\n  color: blue;\n}","<h1>ისწავლეთ ვებ დეველოპმენტი</h1>\n<p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Delectus, quos?</p>\n<p class=\"colored\" id=\"special\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Delectus, quos?</p>\n<p class=\"colored\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Delectus, quos?</p>\n<p class=\"colored\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Delectus, quos?</p>","h1 {\n  color: red;\n  font-size: 40px;\n}\n\n#special {\n  color: blue;\n}\n\n.colored {\n  color: purple;\n}","h1 {\n  color: red;\n}\n\nh1 {\n  color: blue;\n}\n\nh1 {\n  color: green;\n}","მე მინდა ვისწავლო მეტი!","<p>მე მინდა ვისწავლო მეტი!</p>","<hr />","<p class=\"battle-cry\">მე მინდა ვისწავლო მეტი!</p>","<input type=\"text\" required />","<p>მე <strong>მინდა</strong> ვისწავლო მეტი!</p>","<p>აბზაცი <p>აბზაცის შიგნით აბზაცი (სადმე გინახავთ?)</p></p>","<!doctype html>\n<html lang=\"ka-GE\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>ჩემი ვებ გვერდი</title>\n  </head>\n  <body>\n    <p>მე მინდა ვისწავლო მეტი!</p>\n  </body>\n</html>","<!-- ეს არის კომენტარი! -->\n<p>ეს არ არის კომენტარი...</p>","<img src=\"images/my-image.png\" alt=\"my image\" />","<h1>უმთავრესი სათაური (ყველაზე დიდი)</h1>\n<h2>ზედა დონის სათაური</h2>\n<h3>ქვეთავის სათაური</h3>\n<h4>ქვე-ქვეთავის სათაური</h4>","<p>ეს არის პირველი აბზაცი.</p>\n<p>ეს არის მეორე აბზაცი, რომელიც გამოჩნდება პირველის ქვეშ!</p>","<p>დღეს საყიდელი მაქვს</p>\n\n<ul>\n  <li>პური</li>\n  <li>მაწონი</li>\n  <li>ხაჭო</li>\n</ul>","<ol>\n  <li>პური</li>\n  <li>მაწონი</li>\n  <li>ხაჭო</li>\n</ol>","<a href=\"https://iswavle.com\">ისწავლეთ ვებ დეველოპმენტი აქ!</a>","<a href=\"https://iswavle.com\" target=\"_blank\">ისწავლეთ ვებ დეველოპმენტი აქ!</a>","<h3>პირველი ცხრილი</h3>\n<table>\n  <!-- ვქმნით პირველ სტრიქონს -->\n  <tr>\n    <td>პირველი სტრიქონის პირველი უჯრა</td>\n    <td>უჯრა 2</td>\n    <td>ურა 3</td>\n  </tr>\n  <!-- ვქმნით მეორე სტრიქონს -->\n  <tr>\n    <td>მეორე სტრიქონის პირველი უჯრა</td>\n    <td>უჯრა 2</td>\n    <td>ურა 3</td>\n  </tr>\n</table>","td {\n  border-width: 1px;\n  border-style: solid;\n  border-color: black;\n}","td {\n  padding: 8px; /* ცოტა თავისუფალი სივრცე ელემენტის კონტენტსა და ჩარჩოებს შორის*/\n  border: 1px solid black;\n}","table {\n  border-collapse: collapse;\n}","<h3>კლასიკური კომპოზიტორები</h3>\n<table>\n  <tr>\n    <th>სახელი</th>\n    <th>ქვეყანა</th>\n    <th>წლები</th>\n  </tr>\n</table>","td,\nth {\n  padding: 8px; /* ცოტა თავისუფალი სივრცე ელემენტის კონტენტსა და ჩარჩოებს შორის*/\n  border: 1px solid black;\n}","<h3>კლასიკური კომპოზიტორები</h3>\n<table>\n  <tr>\n    <th>სახელი</th>\n    <th>ქვეყანა</th>\n    <th>წლები</th>\n  </tr>\n  <tr>\n    <td>ბელა ბართოკი</td>\n    <td>უნგრეთი</td>\n    <td>1881-1945</td>\n  </tr>\n  <tr>\n    <td>ოლივიე მესიანი</td>\n    <td>საფრანგეთი</td>\n    <td>1908-1992</td>\n  </tr>\n  <tr>\n    <td>ალფრედ შნიტკე</td>\n    <td>რუსეთი</td>\n    <td>1934-1998</td>\n  </tr>\n</table>","<table>\n  <thead>\n    <tr>\n      <th>სახელი</th>\n      <th>ქვეყანა</th>\n      <th>წლები</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ბელა ბართოკი</td>\n      <td>უნგრეთი</td>\n      <td>1881-1945</td>\n    </tr>\n    <tr>\n      <td>ოლივიე მესიანი</td>\n      <td>საფრანგეთი</td>\n      <td>1908-1992</td>\n    </tr>\n    <tr>\n      <td>ალფრედ შნიტკე</td>\n      <td>რუსეთი</td>\n      <td>1934-1998</td>\n    </tr>\n  </tbody>\n</table>","thead {\n  background-color: rgb(55, 89, 161);\n  color: white;\n}\n\ntbody {\n  background-color: rgb(240, 240, 240);\n}","<tfoot>\n  <tr>\n    <td colspan=\"3\">\n      &copy Wikipedia\n      <a href=\"https://en.wikipedia.org/wiki/Wikipedia:Text_of_the_Creative_Commons_Attribution-ShareAlike_4.0_International_License\">CC BY-SA</a>\n    </td>\n  </tr>\n</tfoot>","tfoot {\n  text-align: center;\n  background-color: rgb(219, 219, 219);\n}","<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"./style.css\" />\n    <title>Box Model</title>\n  </head>\n  <body>\n    <p>ესაა პარაგრაფი</p>\n    <ul>\n      <li>სიაში პირველი</li>\n      <li>სიაში მეორე</li>\n      <li>სიაში მესამე</li>\n    </ul>\n    <p>ამ პარაგრაფში რომელიღაც ჩვეულებრივ <span>ინლაინ</span> ელემენტი <span class=\"block\">გადაიქცევა ბლოკად</span> და შესაბამისად თავისთვის დაიკავებს მთლიან სტრიქონს.</p>\n  </body>\n</html>","p,\nul {\n  border: 2px solid blue;\n  padding: 12px;\n}\n\nul {\n  list-style: none;\n  display: flex;\n}\n\nli,\nspan {\n  border: 2px solid paleturquoise;\n  padding: 12px;\n}\n\n.block {\n  display: block;\n}","ul {\n  list-style: none;\n  display: inline-flex;\n}\n\n/* ... სხვა სტილები ...*/\n\n/* .block {\n    display: block;\n} */\n\n.inline {\n  display: inline;\n}","<p class=\"inline\">ესაა პარაგრაფი</p>\n<ul>\n  <li>სიაში პირველი</li>\n  <li>სიაში მეორე</li>\n  <li>სიაში მესამე</li>\n</ul>\n<p class=\"inline\">ამ პარაგრაფში რომელიღაც ჩვეულებრივ <span>ინლაინ</span> ელემენტი <span>გადაიქცევა ბლოკად</span> და შესაბამისად თავისთვის დაიკავებს მთლიან სტრიქონს.</p>","p {\n  background-color: beige;\n  padding: 40px;\n  border: 30px solid blue;\n  margin: 60px;\n  width: 400px;\n}","box-sizing: content-box;","p {\n  /* ... სხვა სტილები ... */\n  box-sizing: border-box;\n}","* {\n  box-sizing: border-box;\n}",".box {\n  margin-top: -40px; /* ზედა */\n  margin-right: 30px; /* მარჯვენა */\n  margin-bottom: 40px; /* ქვედა */\n  margin-left: 60px; /* მარცხენა */\n}",".box {\n  margin: -40px 30px 40px 60px;\n}",".box {\n  margin: 30px 60px;\n}","<div class=\"margin-collapse\">\n  <p class=\"one\">I am paragraph one.</p>\n  <p class=\"two\">I am paragraph two.</p>\n</div>",".one {\n  margin-bottom: 50px;\n}\n\n.two {\n  margin-top: 30px;\n}",".container {\n  border: 10px solid blue;\n  width: 500px;\n  height: 350px;\n\n  margin-left: auto;\n}",".container {\n  /* ... სხვა სტილები ... */\n  margin-left: auto;\n  margin-right: auto;\n}",".container {\n  margin: auto;\n}",".container {\n  margin: 50px auto;\n}",".bordered {\n  border: 4px solid #000;\n}","<div class=\"border-example\">\n  <p class=\"bordered\">I have a border!</p>\n</div>",".bordered {\n  border-top: 4px solid #000;\n  border-right: 10px dotted #4ace4a;\n  border-bottom: 20px dashed blue;\n  border-left: 26px groove purple;\n}",".example {\n  /* padding-top-იდან საათის ისრის მიხედვით */\n  padding: 10px 20px 30px 40px;\n\n  /* 10px ვერტიკალურად, 20px ჰორიზონტალურად */\n  padding: 10px 20px;\n\n  /* ყველა მხრიდან 12px */\n  padding: 12px;\n}","ng g d example","import { Directive, HostListener } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appExample]\",\n  standalone: true,\n})\nexport class ExampleDirective {\n  constructor() {}\n\n  @HostListener(\"click\") onClick() {\n    console.log(\"click detected\");\n  }\n}","import { HostListener, Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@Component({\n  selector: \"app\",\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <h1>\n      Hello, you have pressed enter {{ counter }} number of times!\n    </h1>\n    Press enter key to increment the counter.`,\n})\nexport class AppComponent {\n  counter = 0;\n  @HostListener(\"window:keydown.enter\")\n  handleKeyDown() {\n    this.counter++;\n  }\n}","  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent) {\n    console.log(`click detected on X:${event.x}, Y: ${event.y}`);\n  }","import { HttpClient } from \"@angular/common/http\";\nimport { inject, Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { tap } from \"rxjs\";\n\ninterface LoginResponse {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  gender: string;\n  image: string;\n  token: string;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private jwtHelper: JwtHelperService\n  ) {}\n\n  login(credentials: { username: string; password: string }) {\n    return this.http\n      .post<LoginResponse>(\n        \"https://dummyjson.com/auth/login\",\n        JSON.stringify(credentials),\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .pipe(\n        tap((response) => {\n          localStorage.setItem(\"access_token\", response.token);\n          localStorage.setItem(\"user\", JSON.stringify(response));\n          this.router.navigate([\"/\"]);\n        })\n      );\n  }\n\n  logout() {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"user\");\n    this.router.navigate([\"/\"]);\n  }\n\n  getUserId() {\n    const user = localStorage.getItem(\"user\");\n    if (user) {\n      return JSON.parse(user).id;\n    } else {\n      return null;\n    }\n  }\n\n  isTokenExpired() {\n    return this.jwtHelper.isTokenExpired();\n  }\n\n  canActivate() {\n    if (this.isTokenExpired()) {\n      this.router.navigate([\"/auth\"]);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\nexport const canActivateCart: CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot\n) => {\n  return inject(AuthService).canActivate();\n};","import { Routes } from \"@angular/router\";\nimport { AuthComponent } from \"./auth/auth.component\";\nimport { LogoutComponent } from \"./logout/logout.component\";\nimport { canActivateCart } from \"./services/auth.service\";\nimport { ShoppingCartComponent } from \"./shopping-cart/shopping-cart.component\";\n\nexport const routes: Routes = [\n  { path: \"auth\", component: AuthComponent },\n  { path: \"logout\", component: LogoutComponent },\n  {\n    path: \"cart\",\n    component: ShoppingCartComponent,\n    canActivate: [canActivateCart],\n  },\n  { path: \"\", redirectTo: \"cart\", pathMatch: \"full\" },\n];","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from \"@angular/router\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.isTokenExpired()) {\n      this.router.navigate([\"/auth\"]);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}","import { Routes } from \"@angular/router\";\nimport { AuthComponent } from \"./auth/auth.component\";\nimport { AuthGuard } from \"./guards/auth.guard\";\nimport { LogoutComponent } from \"./logout/logout.component\";\nimport { ShoppingCartComponent } from \"./shopping-cart/shopping-cart.component\";\n\nexport const routes: Routes = [\n  { path: \"auth\", component: AuthComponent },\n  { path: \"logout\", component: LogoutComponent },\n  {\n    path: \"cart\",\n    component: ShoppingCartComponent,\n    canActivate: [AuthGuard],\n  },\n  { path: \"\", redirectTo: \"cart\", pathMatch: \"full\" },\n];","npm install @auth0/angular-jwt","import { ApplicationConfig, importProvidersFrom } from \"@angular/core\";\nimport {\n  provideHttpClient,\n  withInterceptorsFromDi,\n} from \"@angular/common/http\";\nimport { JwtModule } from \"@auth0/angular-jwt\";\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withInterceptorsFromDi()),\n    importProvidersFrom(\n      JwtModule.forRoot({\n        config: {\n          tokenGetter: () => localStorage.getItem(\"access_token\"),\n          allowedDomains: [\"dummyjson.com\"],\n        },\n      })\n    ),\n  ],\n};","import { Injectable } from \"@angular/core\";\nimport { ShoppingCart } from \"../types/cart.model\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class CartService {\n  constructor(private http: HttpClient, private authService: AuthService) {}\n\n  getCartsForUser() {\n    return this.http.get<{ carts: ShoppingCart[] }>(\n      `https://dummyjson.com/auth/carts/user/`,\n      {\n        headers: {\n          Authentication: `Bearer ${authService.getToken()}`,\n        },\n      }\n    );\n  }\n}","import { Routes } from \"@angular/router\";\nimport { AuthComponent } from \"./auth/auth.component\";\nimport { LogoutComponent } from \"./logout/logout.component\";\nimport { ShoppingCartComponent } from \"./shopping-cart/shopping-cart.component\";\n\nexport const routes: Routes = [\n  { path: \"auth\", component: AuthComponent },\n  { path: \"logout\", component: LogoutComponent },\n  {\n    path: \"cart\",\n    component: ShoppingCartComponent,\n  },\n  { path: \"\", redirectTo: \"cart\", pathMatch: \"full\" },\n];","<header>\n  <nav>\n    <ul>\n      <li>\n        <a routerLink=\"/auth\">Login/Register</a>\n      </li>\n      <li>\n        <a routerLink=\"/logout\">logout</a>\n      </li>\n    </ul>\n  </nav>\n</header>\n<router-outlet></router-outlet>","export interface Product {\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  discountPercentage: number;\n  rating: number;\n  stock: number;\n  brand: string;\n  category: string;\n  thumbnail: string;\n  images: string[];\n}","import { Product } from \"./product.model\";\n\nexport interface ShoppingCart {\n  id: number;\n  products: Product[];\n}","import { HttpClient } from \"@angular/common/http\";\nimport { inject, Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { tap } from \"rxjs\";\n\ninterface LoginResponse {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  gender: string;\n  image: string;\n  token: string;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(credentials: { username: string; password: string }) {\n    return this.http\n      .post<LoginResponse>(\n        \"https://dummyjson.com/auth/login\",\n        JSON.stringify(credentials),\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .pipe(\n        tap((response) => {\n          localStorage.setItem(\"access_token\", response.token);\n          localStorage.setItem(\"user\", JSON.stringify(response));\n          this.router.navigate([\"/\"]);\n        })\n      );\n  }\n\n  logout() {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"user\");\n    this.router.navigate([\"/\"]);\n  }\n\n  getUserId() {\n    const user = localStorage.getItem(\"user\");\n    if (user) {\n      return JSON.parse(user).id;\n    } else {\n      return null;\n    }\n  }\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule, FormBuilder, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Component({\n  selector: \"app-auth\",\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: \"./auth.component.html\",\n  styleUrls: [\"./auth.component.css\"],\n})\nexport class AuthComponent {\n  loginForm = this.fb.nonNullable.group({\n    username: [\"\", Validators.required],\n    password: [\"\", Validators.required],\n  });\n\n  constructor(private fb: FormBuilder, private authService: AuthService) {}\n\n  login() {\n    if (this.loginForm.valid) {\n      this.authService\n        .login(this.loginForm.getRawValue())\n        .subscribe((response) => {\n          console.log(response);\n        });\n    }\n  }\n}","<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n  <h1>Log In</h1>\n  <div>\n    <label for=\"username\">Username</label>\n    <input type=\"text\" id=\"username\" formControlName=\"username\" />\n  </div>\n  <div>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" formControlName=\"password\" />\n  </div>\n  <button type=\"submit\" [disabled]=\"loginForm.invalid\">log in</button>\n</form>","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Component({\n  selector: \"app-logout\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./logout.component.html\",\n  styleUrls: [\"./logout.component.css\"],\n})\nexport class LogoutComponent implements OnInit {\n  constructor(private authService: AuthService) {}\n\n  ngOnInit(): void {\n    this.authService.logout();\n  }\n}","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { ShoppingCart } from \"../types/cart.model\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class CartService {\n  constructor(private http: HttpClient, private authService: AuthService) {}\n\n  getCartsForUser() {\n    return this.http.get<{ carts: ShoppingCart[] }>(\n      `https://dummyjson.com/auth/carts/user/${this.authService.getUserId()}`\n    );\n  }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { CartService } from \"../services/cart.service\";\nimport { ShoppingCart } from \"../types/cart.model\";\n\n@Component({\n  selector: \"app-shopping-cart\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./shopping-cart.component.html\",\n  styleUrls: [\"./shopping-cart.component.css\"],\n})\nexport class ShoppingCartComponent implements OnInit {\n  carts: ShoppingCart[] = [];\n  constructor(private cartService: CartService) {}\n\n  ngOnInit(): void {\n    this.cartService.getCartsForUser().subscribe((response) => {\n      this.carts = response.carts;\n    });\n  }\n}","<div *ngFor=\"let cart of carts\">\n  <h1>Shopping Cart:</h1>\n  <div *ngFor=\"let product of cart.products\">\n    <h2>{{ product.title }}</h2>\n    <h3>{{ product.price | currency }}</h3>\n  </div>\n</div>","a = 1121;\na = 1118;","@if (a > b) {\n    <p>{{a}} is greater than {{b}}</p>\n}","@if (a > b) {\n    <p>{{a}} is greater than {{b}}</p>\n} @else if (b > a) {\n    <p>{{a}} is less than {{b}}</p>\n} @else {\n    <p>{{a}} is equal to {{b}}</p>\n}","@if (users$ | async; as users) {\n    {{ users.length }}\n}","items = [\n    { name: \"ტარიელ\", id: \"0142\"},\n    { name: \"ავთანდილ\", id: \"0153\"},\n    { name: \"ფრიდონ\", id: \"0294\"},\n]","<ul>\n    @for (item of items; track item.id) {\n      <li>{{ item.name }}</li>\n    }\n</ul>"," @for (item of items; track item) {\n   <li>{{ item.name }}</li>\n }","<ul>\n    @for (item of items; track item.id) {\n      <li>{{ item.name }} {{$index}}</li>\n    }\n</ul>","<ul>\n    @for (item of items; track item.id; let idx = $index; let e = $even) {\n      <li>{{ item.name }} {{idx}}</li>\n    }\n</ul>","<ul>\n    @for (item of items; track item.id) {\n        <li>{{ item.name }} {{$index}}</li>\n    } @empty {\n        <li>აქ არაფერია!</li>\n    }\n</ul>","@switch (condition) {\n  @case (caseA) {\n    Case A.\n  }\n  @case (caseB) {\n    Case B.\n  }\n  @default {\n    Default case.\n  }\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styles: `\n    div {\n      transition: background 500ms ease;\n    }\n    .square-red {\n      width: 100px;\n      height: 100px;\n      background: red;\n    }\n    .square-blue {\n      width: 100px;\n      height: 100px;\n      background: blue;\n    }\n  `,\n  ,\n})\nexport class AppComponent {\n  imgData = {\n    src: \"https://angular.io/assets/images/logos/angular/angular.svg\",\n    alt: \"Angular Logo\",\n  };\n  btnDisabled = true;\n  squareClass = \"square-red\";\n\n  changeSquare() {\n    this.squareClass =\n      this.squareClass === \"square-red\" ? \"square-blue\" : \"square-red\";\n  }\n}","<!-- no binding -->\n<img src=\"https://example.com\" alt=\"some alt text\" />\n<!-- with binding -->\n<img [src]=\"imgData.src\" [alt]=\"imgData.alt\" />\n<button [disabled]=\"btnDisabled\">Can't Click</button>\n<br />\n<div [class]=\"squareClass\"></div>\n<button (click)=\"changeSquare()\">Change Color</button>","// Inside the class\nmyBgColor = \"violet\";","<button (click)=\"changeSquare()\" [style.background]=\"myBgColor\">\n  Change Color\n</button>","<button\n  (click)=\"changeSquare()\"\n  [style.background]=\"myBgColor\"\n  [attr.aria-label]=\"actionLabel\"\n>\n  Change Color\n</button>","// in the class\nactionLabel = \"Change square color\";","ng g c sizer","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@Component({\n  selector: \"app-sizer\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./sizer.component.html\",\n  styleUrl: \"./sizer.component.css\",\n})\nexport class SizerComponent {\n  @Input() size!: number | string;\n  @Output() sizeChange = new EventEmitter<number>();\n\n  dec() {\n    this.resize(-1);\n  }\n  inc() {\n    this.resize(+1);\n  }\n\n  resize(delta: number) {\n    // Keep size only between 40px and 8px\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n}","<div>\n  <button type=\"button\" (click)=\"dec()\" title=\"smaller\">-</button>\n  <button type=\"button\" (click)=\"inc()\" title=\"bigger\">+</button>\n  <span [style.font-size.px]=\"size\">FontSize: {{size}}px</span>\n</div>","<app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx = $event\"></app-sizer>\n<div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>","fontSizePx = 16;","<app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n<div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>","@Input() size!: number | string;\n@Output() sizeChange = new EventEmitter<number>();","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './child.component.html',\n  styleUrl: './child.component.scss',\n})\nexport class ChildComponent {\n  @Input() message: string = '';\n}","<p>{{ message }}</p>","import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  messages = ['The first message', 'The second message'];\n}","<app-child [message]=\"messages[0]\"></app-child> <app-child [message]=\"messages[1]\"></app-child>","<!-- Error: cannot assign type number to type string -->\n<app-child [message]=\"34\"></app-child>","<p>{{ message }}</p>\n<button (click)=\"onCount()\">Count Message Length</button>","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-child',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './child.component.html',\n  styleUrl: './child.component.scss',\n})\nexport class ChildComponent {\n  @Input() message: string = '';\n  @Output() lengthCount = new EventEmitter<number>();\n\n  onCount() {\n    this.lengthCount.emit(this.message.length);\n  }\n}","<app-child [message]=\"messages[0]\" (lengthCount)=\"logLength($event)\"></app-child> <app-child [message]=\"messages[1]\" (lengthCount)=\"logLength($event)\"></app-child>","// In AppComponent\nlogLength(length: number) {\n  console.log(length);\n}","import { Component, EventEmitter, Input, Output, OnChanges, SimpleChanges } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-child',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './child.component.html',\n  styleUrl: './child.component.scss',\n})\nexport class ChildComponent implements OnChanges {\n  @Input() message: string = '';\n  @Output() lengthCount = new EventEmitter<number>();\n\n  onCount() {\n    this.lengthCount.emit(this.message.length);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.message) {\n      console.log('მესიჯი განახლდა: ', changes.message.currentValue);\n    }\n  }\n}","export interface Hero {\n  name: string;\n  description: string;\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HeroListComponent } from \"./hero-list.component\";\nimport { HeroDetailsComponent } from \"./hero-details.component\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule, HeroListComponent, HeroDetailsComponent],\n  template: `\n    <div class=\"container\">\n      <app-hero-list></app-hero-list>\n      <app-hero-details></app-hero-details>\n    </div>\n  `,\n  styles: [\n    `\n      .container {\n        max-width: 600px;\n        display: grid;\n        grid-template-columns: 300px 300px;\n        grid-auto-rows: minmax(300px, auto);\n      }\n\n      .container > * {\n        border: 2px solid black;\n        padding: 8px;\n      }\n    `,\n  ],\n})\nexport class AppComponent {}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HeroListComponent } from \"./hero-list.component\";\nimport { HeroDetailsComponent } from \"./hero-details.component\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule, HeroListComponent, HeroDetailsComponent],\n  template: `\n    <div class=\"container\">\n      <app-hero-list></app-hero-list>\n      <app-hero-details></app-hero-details>\n    </div>\n  `,\n  styles: [\n    `\n      .container {\n        max-width: 600px;\n        display: grid;\n        grid-template-columns: 300px 300px;\n        grid-auto-rows: minmax(300px, auto);\n      }\n\n      .container > * {\n        border: 2px solid black;\n        padding: 8px;\n      }\n    `,\n  ],\n})\nexport class AppComponent {}","import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { Hero } from \"./types/hero\";\n\n@Injectable({ providedIn: \"root\" })\nexport class HeroService {\n  heroes: Hero[] = [\n    {\n      name: \"Tariel\",\n      description:\n        \"Tariel is distinguished by his wild character as symbolized by his wearing the panther's skin.The qualities associated with the cat, his dedication and courage, his hatred and violence could be extreme and uncontrollable.\",\n    },\n    {\n      name: \"Avtandil\",\n      description:\n        \"Avtandil, the knight and commander-in-chief of Rostevan's armies. One day, Avtandil challenges King Rostevan to a hunting competition. After three days of shooting game, they encounter a knight crying by a river.\",\n    },\n    {\n      name: \"Nuradin-Pridon\",\n      description:\n        \"Nuradin-Pridon, ruler of Mulgazanzar. He initially met Tariel after he survived a battle against traitors who tried to ambush him. After sharing their stories, Nuradin-Pridon gifted Tariel his trusty Arabian steed to aid him in his journey.\",\n    },\n  ];\n\n  pickedHero$ = new BehaviorSubject<Hero>(this.heroes[0]);\n\n  pickHero(hero: Hero) {\n    this.pickedHero$.next(hero);\n  }\n}","import { HeroService } from './hero.service.ts'\n@NgModule({\n  // ... declarations, imports, etc.\n  providers: [HeroService],\n})","import { HeroService } from './hero.service.ts'\n@Component({\n  // ... selector, template, etc.\n  providers: [HeroService]\n})","  pickedHero$ = new BehaviorSubject<Hero>(this.heroes[0]);\n\n  pickHero(hero: Hero) {\n    this.pickedHero$.next(hero);\n  }","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/core\";\nimport { HeroService } from \"../hero.service\";\n\n@Component({\n  selector: \"app-hero-list\",\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <h2>Pick the hero</h2>\n    <ul>\n      <li\n        *ngFor=\"let hero of heroService.heroes\"\n        (click)=\"heroService.pickHero(hero)\"\n      >\n        {{ hero.name }}\n      </li>\n    </ul>\n  `,\n  styles: [\n    `\n      li {\n        cursor: pointer;\n      }\n      li:hover {\n        text-decoration: underline;\n      }\n    `,\n  ],\n})\nexport class HeroListComponent {\n  constructor(public heroService: HeroService) {}\n}","import { inject } from \"@angular/core\";\n/* ... */\nexport class HeroListComponent {\n  public heroService = inject(HeroService);\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HeroService } from \"../hero.service\";\nimport { Hero } from \"../types/hero\";\n\n@Component({\n  selector: \"app-hero-details\",\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div *ngIf=\"hero\">\n      <h2>{{ hero.name }}</h2>\n      <p>{{ hero.description }}</p>\n    </div>\n  `,\n})\nexport class HeroDetailsComponent {\n  hero: Hero | null = null;\n  constructor(private heroService: HeroService) {\n    this.heroService.pickedHero$.subscribe((hero) => {\n      this.hero = hero;\n    });\n  }\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Hero } from \"./types/hero\";\nimport { HeroListComponent } from \"./hero-list.component\";\nimport { HeroDetailsComponent } from \"./hero-details.component\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule, HeroListComponent, HeroDetailsComponent],\n  template: `\n    <div class=\"container\">\n      <app-hero-list\n        [heroes]=\"heroes\"\n        (heroPicked)=\"onHeroPicked($event)\"\n      ></app-hero-list>\n      <app-hero-details [hero]=\"pickedHero\"></app-hero-details>\n    </div>\n  `,\n  styles: [\n    `\n      .container {\n        max-width: 600px;\n        display: grid;\n        grid-template-columns: 300px 300px;\n        grid-auto-rows: minmax(300px, auto);\n      }\n\n      .container > * {\n        border: 2px solid black;\n        padding: 8px;\n      }\n    `,\n  ],\n})\nexport class AppComponent {\n  heroes: Hero[] = [\n    {\n      name: \"Tariel\",\n      description:\n        \"Tariel is distinguished by his wild character as symbolized by his wearing the panther's skin.The qualities associated with the cat, his dedication and courage, his hatred and violence could be extreme and uncontrollable.\",\n    },\n    {\n      name: \"Avtandil\",\n      description:\n        \"Avtandil, the knight and commander-in-chief of Rostevan's armies. One day, Avtandil challenges King Rostevan to a hunting competition. After three days of shooting game, they encounter a knight crying by a river.\",\n    },\n    {\n      name: \"Nuradin-Pridon\",\n      description:\n        \"Nuradin-Pridon, ruler of Mulgazanzar. He initially met Tariel after he survived a battle against traitors who tried to ambush him. After sharing their stories, Nuradin-Pridon gifted Tariel his trusty Arabian steed to aid him in his journey.\",\n    },\n  ];\n  // Initially set on first hero\n  pickedHero: Hero = this.heroes[0];\n\n  onHeroPicked(heroName: string) {\n    const chosenHero = this.heroes.find((hero) => hero.name === heroName);\n    if (chosenHero) {\n      this.pickedHero = chosenHero;\n    }\n  }\n}","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Hero } from \"../types/hero\";\n\n@Component({\n  selector: \"app-hero-list\",\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <h2>Pick the hero</h2>\n    <ul>\n      <li *ngFor=\"let hero of heroes\" (click)=\"heroPicked.emit(hero.name)\">\n        {{ hero.name }}\n      </li>\n    </ul>\n  `,\n  styles: [\n    `\n      li {\n        cursor: pointer;\n      }\n      li:hover {\n        text-decoration: underline;\n      }\n    `,\n  ],\n})\nexport class HeroListComponent {\n  @Input() heroes!: Hero[];\n  @Output() heroPicked = new EventEmitter<string>();\n}","import { Component, Input, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Hero } from \"../types/hero\";\n\n@Component({\n  selector: \"app-hero-details\",\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div *ngIf=\"hero\">\n      <h2>{{ hero.name }}</h2>\n      <p>{{ hero.description }}</p>\n    </div>\n  `,\n})\nexport class HeroDetailsComponent {\n  @Input() hero!: Hero;\n}","class Knight {\n  defend() {\n    return \"defend the ruler\";\n  }\n}\nclass General {\n  command() {\n    return \"give commands\";\n  }\n}","class Soldier {\n  general: General;\n  orders = \"no orders for now\";\n  constructor() {\n    this.general = new General();\n    this.orders = this.general.command();\n  }\n}","const soldier1 = new Soldier();\nconst soldier2 = new Soldier();\nconst soldier3 = new Soldier();","console.log(soldier1.general === soldier2.general);","class Soldier {\n  orders = \"no orders for now\";\n  constructor(public general: General) {\n    this.orders = this.general.command();\n  }\n}","const general = new General();\nconst soldier1 = new Soldier(general);\nconst soldier2 = new Soldier(general);\nconst soldier3 = new Soldier(general);","console.log(soldier1.general === soldier2.general);","class King {\n  constructor(\n    public knight: Knight,\n    public general: General,\n    public soldier: Soldier\n  ) {}\n}","const knight = new Knight();\nconst general = new General();\nconst soldier = new Soldier(general);\nconst king = new King(knight, general, soldier);","[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200","import { CommonModule } from \"@angular/core\";\n\n@Component({\n  /* ... */\n  standalone: true,\n  imports: [CommonModule],\n})\nexport class AppComponent {}","<h1 [ngClass]=\"isSpecial ? 'special' : '' \">I love Angular</h1>","<h1 [ngClass]=\"{special: isSpecial, interesting: isInteresting}\">\n  I love Angular\n</h1>","import { NgClass } from \"@angular/common\";\n\n@Component({\n  imports: [NgClass]\n})\nexport class AppComponent","import { CommonModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\n\n@Component({\n  /* ... */\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n})\nexport class AppComponent {}","<label for=\"example-ngModel\">[(ngModel)]:</label>\n<input [(ngModel)]=\"title\" id=\"example-ngModel\" />\n\n<h1>You are learning {{ title }}</h1>","ng generate directive highlight","import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appHighlight]\",\n  standalone: true,\n})\nexport class HighlightDirective {\n  constructor() {}\n}","<some-element appHighlight></some-element>","import { Directive, ElementRef, HostListener, Input } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appHighlight]\",\n  standalone: true,\n})\nexport class HighlightDirective {\n  @Input() highlightColor: \"blue\" | \"green\" | \"yellow\" = \"yellow\";\n\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener(\"mouseover\")\n  onMouseOver() {\n    this.elementRef.nativeElement.style.color = this.highlightColor;\n  }\n\n  @HostListener(\"mouseout\")\n  onMouseOut() {\n    this.elementRef.nativeElement.style.color = \"initial\";\n  }\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HighlightDirective } from \"./highlight.directive\";\n\n@Component({\n  // ...\n  standalone: true,\n  imports: [CommonModule, HighlightDirective],\n  // ...\n})\nexport class AppComponent {}","<h1 appHighlight>I love Angular 1</h1>\n<h1 appHighlight highlightColor=\"blue\">I love Angular 2</h1>\n<h1>I love Angular 3</h1>","@Input() appHighlight: \"blue\" | \"green\" | \"yellow\" = \"yellow\";","<h1 appHighlight=\"blue\">I love Angular 2</h1>","<button (click)=\"isActive = !isActive\">toggle</button>\n<app-item-detail *ngIf=\"isActive\" [item]=\"item\"></app-item-detail>","<app-item-detail *ngFor=\"let item of items\" [item]=\"item\"></app-item-detail>","<div *ngFor=\"let item of items\">\n  <h3>{{ item. name }}</h3>\n  <p>{{ item.description }}</p>\n</div>","itemTrackBy(index, item) {\n  return item.name\n}","<div *ngFor=\"let item of items; trackBy: itemTrackBy\">\n  <h3>{{ item.name }}</h3>\n  <p>{{ item.description }}</p>\n</div>","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule, FormControl } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-signup-form\",\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: \"./signup-form.component.html\",\n  styleUrl: \"./signup-form.component.css\",\n})\nexport class SignupFormComponent {\n  name = new FormControl(\"\");\n}","<form>\n  <div class=\"form-block\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" id=\"name\" [formControl]=\"name\" />\n  </div>\n</form>\n<div>\n  <h3>Result:</h3>\n  <div>{{ name.value }}</div>\n</div>","import { Component, inject } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule, FormControl } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-signup-form\",\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: \"./signup-form.component.html\",\n  styleUrl: \"./signup-form.component.css\",\n})\nexport class SignupFormComponent {\n  private fb = inject(FormBuilder);\n\n  signupForm = this.fb.group({\n    name: [\"\"],\n    email: [\"\"],\n    password: [\"\"],\n  });\n\n  onSubmit() {\n    console.log(this.signupForm.value);\n  }\n}","<form [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-block\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" id=\"name\" formControlName=\"name\" />\n  </div>\n  <div class=\"form-block\">\n    <label for=\"email\">Email</label>\n    <input type=\"email\" id=\"email\" formControlName=\"email\" />\n  </div>\n  <div class=\"form-block\">\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" formControlName=\"password\" />\n  </div>\n  <button>Submit</button>\n</form>\n<div>\n  <h3>Result:</h3>\n  <div>{{ signupForm.value | json }}</div>\n</div>","<!-- form ending -->\n</form>\n<button (click)=\"onUpdateName()\">Update name</button>\n<div>\n  <h3>Result:</h3>\n  <div>{{ signupForm.value | json }}</div>\n</div>","  onUpdateName() {\n    this.signupForm.controls['name'].setValue('Thelonious Monk');\n  }","  onUpdateName() {\n    // this.signupForm.controls['name'].setValue('Thelonious Monk');\n    this.signupForm.setValue({\n      name: 'John Doe',\n      email: 'john@doe.com',\n      password: 'badpassword123',\n    });\n  }","  onUpdateName() {\n    // this.signupForm.controls['name'].setValue('Thelonious Monk');\n    this.signupForm.patchValue({\n      name: 'John',\n      email: 'John@mail.com',\n    });\n  }","  onSubmit() {\n    console.log(this.signupForm.value);\n    this.signupForm.reset();\n  }","export class SignupFormComponent {\n  private fb = inject(FormBuilder);\n\n  signupForm = this.fb.group({\n    name: [\"\"],\n    email: [\"\"],\n    password: [\"\"],\n    positions: this.fb.array([this.fb.control(\"\")]),\n  });\n\n  get positions() {\n    return this.signupForm.controls[\"positions\"];\n  }\n\n  onSubmit() {\n    console.log(this.signupForm.value);\n  }\n\n  onUpdateName() {\n    // this.signupForm.controls['name'].setValue('Thelonious Monk');\n    // this.signupForm.setValue({\n    //   name: 'John',\n    //   email: 'John@mail.com',\n    //   password: 'badpassword123',\n    // });\n  }\n\n  addPosition() {\n    this.positions.push(this.fb.control(\"\"));\n  }\n}","<div class=\"form-block\" formArrayName=\"positions\">\n  <div class=\"positions-title\">\n    <h3>Positions</h3>\n    <button type=\"button\" (click)=\"addPosition()\">+</button>\n  </div>\n  <input\n    type=\"text\"\n    *ngFor=\"let position of positions.controls; let i = index\"\n    [formControlName]=\"i\"\n  />\n</div>","<form>\n  <h1>Start your journey</h1>\n\n  <div class=\"form-group\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" id=\"name\" name=\"name\" />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"email\">Email</label>\n    <input type=\"email\" id=\"email\" name=\"email\" />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"friend\">Friend</label>\n    <select id=\"friend\" name=\"friend\">\n      <option *ngFor=\"let friend of friends\" [value]=\"friend\">\n        {{ friend }}\n      </option>\n    </select>\n  </div>\n</form>","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-hero-form\",\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: \"./hero-form.component.html\",\n  styleUrl: \"./hero-form.component.css\",\n})\nexport class HeroFormComponent {\n  friends = [\"Tariel\", \"Avtandil\", \"Nuradin-Pridon\"];\n  heroData = {\n    name: \"\",\n    email: \"\",\n    friend: \"\",\n  };\n\n  submitted = false;\n\n  onSubmit() {\n    this.submitted = true;\n  }\n}","<form (ngSubmit)=\"onSubmit()\">\n  <h1>Start your journey</h1>\n\n  <div class=\"form-group\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" id=\"name\" name=\"name\" [(ngModel)]=\"heroData.name\" />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"email\">Email</label>\n    <input type=\"email\" id=\"email\" name=\"email\" [(ngModel)]=\"heroData.email\" />\n    <span *ngIf=\"emailCtrl.invalid && !emailCtrl.pristine\"\n      >Email is required!</span\n    >\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"friend\">Friend</label>\n    <select id=\"friend\" name=\"friend\" [(ngModel)]=\"heroData.friend\">\n      <option *ngFor=\"let friend of friends\" [value]=\"friend\">\n        {{ friend }}\n      </option>\n    </select>\n    <span *ngIf=\"friendCtrl.invalid\">You shouldn't go alone!</span>\n  </div>\n  <button>Submit</button>\n</form>\n\n<div *ngIf=\"submitted\">\n  <h3>OUTPUT:</h3>\n  <div>{{ heroData | json }}</div>\n</div>","<form (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\">\n  <h1>Start your journey</h1>\n  <div class=\"form-group\">\n    <label for=\"name\">Name</label>\n    <input\n      type=\"text\"\n      id=\"name\"\n      name=\"name\"\n      [(ngModel)]=\"heroData.name\"\n      required\n      #nameCtrl=\"ngModel\"\n    />\n    <span *ngIf=\"nameCtrl.invalid && !nameCtrl.pristine\"\n      >Name is required!</span\n    >\n  </div>\n  <div class=\"form-group\">\n    <label for=\"email\">Email</label>\n    <input\n      type=\"email\"\n      id=\"email\"\n      name=\"email\"\n      [(ngModel)]=\"heroData.email\"\n      required\n      email\n      #emailCtrl=\"ngModel\"\n    />\n    <span *ngIf=\"emailCtrl.invalid && !emailCtrl.pristine\"\n      >Email is required!</span\n    >\n  </div>\n  <div class=\"form-group\">\n    <label for=\"friend\">Friend</label>\n    <select\n      id=\"friend\"\n      name=\"friend\"\n      [(ngModel)]=\"heroData.friend\"\n      required\n      #friendCtrl=\"ngModel\"\n    >\n      <option *ngFor=\"let friend of friends\" [value]=\"friend\">\n        {{ friend }}\n      </option>\n    </select>\n    <span *ngIf=\"friendCtrl.invalid\">You shouldn't go alone!</span>\n  </div>\n  <button [disabled]=\"heroForm.invalid\">Submit</button>\n</form>\n\n<div *ngIf=\"submitted\">\n  <h3>OUTPUT:</h3>\n  <div>{{ heroData | json }}</div>\n</div>","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule, FormBuilder } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-signup-form\",\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: \"./signup-form.component.html\",\n  styleUrls: \"./signup-form.component.css\",\n})\nexport class SignupFormComponent {\n  signupForm = this.fb.group({\n    name: [\"\"],\n    email: [\"\"],\n    password: [\"\"],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit() {\n    console.log(this.signupForm.value);\n  }\n}","<form [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-block\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" id=\"name\" formControlName=\"name\" />\n  </div>\n  <div class=\"form-block\">\n    <label for=\"email\">Email</label>\n    <input type=\"email\" id=\"email\" formControlName=\"email\" />\n  </div>\n  <div class=\"form-block\">\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" formControlName=\"password\" />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n<div>\n  <h3>Result:</h3>\n  <div>{{ signupForm.value | json }}</div>\n</div>","signupForm = this.fb.group({\n  name: [\"\", Validators.required],\n  email: [\"\", [Validators.required, Validators.email]],\n  password: [\"\", Validators.required],\n});","<button type=\"submit\" [disabled]=\"signupForm.invalid\">Submit</button>","signupForm = this.fb.group({\n  name: [\"\", [Validators.required, Validators.pattern(/^[A-z]/)]],\n  email: [\"\", [Validators.required, Validators.email]],\n  password: [\"\", Validators.required],\n  confirmPassword: [\"\", Validators.required],\n});","name: [\"\", [Validators.required, Validators.pattern(/^[A-z]/), Validators.minLength(2)]],","  badNameValidator(pattern: string): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      return control.value.includes(pattern)\n        ? { badName: 'This is a bad name!' }\n        : null;\n    };\n  }","signupForm = this.fb.group({\n  name: [\n    \"\",\n    [\n      Validators.required,\n      Validators.pattern(/^[A-z]/),\n      Validators.minLength(2),\n      this.badNameValidator(\"badname\"),\n    ],\n  ],\n  email: [\"\", [Validators.required, Validators.email]],\n  password: [\n    \"\",\n    Validators.required,\n    this.matchingPasswordsValidator(this.confirmPassword),\n  ],\n});","  get controls() {\n    return this.signupForm.controls;\n  }","<form [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-block\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" id=\"name\" formControlName=\"name\" />\n    <span *ngIf=\"controls['name'].invalid && controls['name'].dirty\">\n      Must provide a proper name!\n    </span>\n    <span *ngIf=\"controls['name']?.errors?.['badName']\">\n      {{ controls['name'].errors?.['badName']}}\n    </span>\n  </div>\n  <div class=\"form-block\">\n    <label for=\"email\">Email</label>\n    <input type=\"email\" id=\"email\" formControlName=\"email\" />\n    <span *ngIf=\"controls['email'].invalid && controls['email'].dirty\">\n      Must provide a proper email!\n    </span>\n  </div>\n  <div class=\"form-block\">\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" formControlName=\"password\" />\n    <span *ngIf=\"controls['password'].invalid && controls['password'].dirty\">\n      Password is required!\n    </span>\n  </div>\n  <button type=\"submit\" [disabled]=\"signupForm.invalid\">Submit</button>\n</form>\n<div>\n  <h3>Result:</h3>\n  <div>{{ signupForm.value | json }}</div>\n</div>","import { ApplicationConfig } from \"@angular/core\";\nimport { provideHttpClient } from \"@angular/common/http\";\n\nexport const appConfig: ApplicationConfig = {\n  providers: [/* ... */ provideHttpClient()],\n};","export interface Product {\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  discountPercentage: number;\n  rating: number;\n  stock: number;\n  brand: string;\n  category: string;\n  thumbnail: string;\n  images: string[];\n}\n\nexport interface GetProductsResponse {\n  products: Product[];\n  total: number;\n  skip: number;\n  limit: number;\n}\n\nexport type AddProduct = Partial<Product>;","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { AddProduct, GetProductsResponse, Product } from \"./product.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class ProductsService {\n  baseUrl = \"https://dummyjson.com\";\n\n  constructor(private http: HttpClient) {}\n\n  getAllProducts() {\n    return this.http.get<GetProductsResponse>(`${this.baseUrl}/products`);\n  }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { AddProduct, Product } from \"./product.model\";\nimport { ProductsService } from \"./products.service\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  loading = true;\n  products: Product[] = [];\n\n  constructor(private productsService: ProductsService) {}\n\n  ngOnInit() {\n    this.productsService.getAllProducts().subscribe((response) => {\n      this.loading = false;\n      this.products = response.products;\n    });\n  }\n}","<div *ngIf=\"products.length\">\n  <div class=\"product-card\" *ngFor=\"let product of products\">\n    <img [src]=\"product.thumbnail\" [alt]=\"product.title\" />\n    <h3>{{ product.title }}</h3>\n    <p>{{ product.description }}</p>\n    <p>{{ product.price | currency }}</p>\n  </div>\n</div>\n\n<div *ngIf=\"loading\">loading...</div>","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { AddProduct, GetProductsResponse, Product } from \"./product.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class ProductsService {\n  baseUrl = \"https://dummyjson.com\";\n\n  constructor(private http: HttpClient) {}\n\n  getAllProducts() {\n    return this.http.get<GetProductsResponse>(`${this.baseUrl}/products`);\n  }\n\n  addProduct(product: AddProduct) {\n    return this.http.post<Product>(`${this.baseUrl}/products/add`, product);\n  }\n\n  deleteProduct(id: number) {\n    return this.http.delete<Product>(`${this.baseUrl}/products/${id}`);\n  }\n\n  editProduct(updatedProduct: Partial<Product>) {\n    return this.http.put<Product>(\n      `${this.baseUrl}/products/${updatedProduct.id}`,\n      updatedProduct\n    );\n  }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { AddProduct, Product } from \"./product.model\";\nimport { ProductsService } from \"./products.service\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  loading = true;\n  products: Product[] = [];\n\n  constructor(private productsService: ProductsService) {}\n\n  ngOnInit() {\n    this.productsService.getAllProducts().subscribe((response) => {\n      this.loading = false;\n      this.products = response.products;\n    });\n  }\n\n  addNewProduct() {\n    const newProduct: AddProduct = {\n      title: \"New Product\",\n      description: \"This is a new test product!\",\n      price: 399,\n      thumbnail: \"https://angular.io/assets/images/logos/angular/angular.svg\",\n    };\n\n    this.productsService.addProduct(newProduct).subscribe((newProduct) => {\n      this.products.unshift(newProduct);\n    });\n  }\n\n  deleteProduct(id: number) {\n    this.productsService.deleteProduct(id).subscribe((deletedProduct) => {\n      this.products = this.products.filter((p) => p.id !== deletedProduct.id);\n    });\n  }\n\n  editProduct(product: Product) {\n    const updatedProduct = {\n      ...product,\n      title: \"This title was edited\",\n      description: \"New updated description\",\n    };\n\n    this.productsService\n      .editProduct(updatedProduct)\n      .subscribe((editedProduct) => {\n        // dummyjson-ის API აბრუნებს იმავე არამოდიფიცირებულ ობიექტს,\n        // ამიტომ მას გარდავქმნით.\n        this.products = this.products.map((product) =>\n          product.id === editedProduct.id ? updatedProduct : product\n        );\n      });\n  }\n}","<button (click)=\"addNewProduct()\">Add new product</button>\n<div *ngIf=\"products.length\">\n  <div class=\"product-card\" *ngFor=\"let product of products\">\n    <img [src]=\"product.thumbnail\" [alt]=\"product.title\" />\n    <h3>{{ product.title }}</h3>\n    <p>{{ product.description }}</p>\n    <p>{{ product.price | currency }}</p>\n    <button (click)=\"deleteProduct(product.id)\">delete</button>\n    <button (click)=\"editProduct(product)\">Edit</button>\n  </div>\n</div>\n\n<div *ngIf=\"loading\">loading...</div>","npm install @ngx-translate/core @ngx-translate/http-loader","// ...\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\n@NgModule({\n  declarations: [/* ... */],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })\n  ],\n  bootstrap: [/* ... */]\n})\nexport class AppModule { }","{\n  \"page_header\": \"Page header\",\n  \"alt_text_for_image\": \"Educata project image\",\n  \"update_button_text\": \"Change language to georgian\"\n}","{\n  \"page_header\": \"გვერდის სათაური\",\n  \"alt_text_for_image\": \"Educata პროექტის სურათი\",\n  \"update_button_text\": \"შეცვალეთ ენა ინგლისურზე\"\n}","{\n  \"homepage\": {\n    \"title\": \"მთავარი გვერდი\"\n  }\n}","<h1>{{\"page_header\" | translate }}</h1>\n<img\n  src=\"https://raw.githubusercontent.com/educata/everrest/main/assets/images/educata-bg-white.png\"\n  alt=\"{{'alt_text-for_image' | translate }}\"\n>\n<button (click)=\"updateLangauge()\">{{\"update_button_text\" | translate }}</button>","import { TranslateService } from '@ngx-translate/core';\n...\nconstructor(private translateService: TranslateService) {\n  this.initLanguage();\n}\n\nprivate initLanguage() {\n  const prevLanguage = localStorage.getItem('language') || 'en';\n  this.translateService.use(prevLanguage);\n}\n\nupdateLangauge() {\n   const nextLang = this.translateService.currentLang === 'en' ? 'ka' : 'en';\n   this.translateService.use(nextLang);\n   localStorage.setItem('language', nextLang);\n}","ng add @angular/localize","{\n  \"projects\": {\n    // ...\n    \"project_name\": {\n      // ...\n      \"i18n\": {\n        \"sourceLocale\": \"en-US\",\n        \"locales\": { \"ka-GE\": \"src/locale/messages.ka.xlf\" }\n      },\n      // ...\n      \"architect\": {\n        // ...\n        \"build\": {\n          // ...\n          \"options\": {\n            // ...\n            \"localize\": [\"ka-GE\"]\n          }\n        }\n      }\n    }\n  }\n}","<h1>Page header</h1>\n<img src=\"https://raw.githubusercontent.com/educata/everrest/main/assets/images/educata-bg-white.png\" alt=\"educata project logo\" />","<h1 i18n>Page header</h1>","<img i18n-alt src=\"https://raw.githubusercontent.com/educata/everrest/main/assets/images/educata-bg-white.png\" alt=\"educata project logo\" />","title = 'Test page';\nconstructor(private titleService: Title) {\n   this.titleService.setTitle(this.title);\n}","constructor(private titleService: Title) {\n   this.titleService.setTitle($localize`${this.title}`);\n}","export class MyComponent {\n  someString = $localize`This value can be localized!`;\n  messages = [$localize`hello`, $localize`goodbye`];\n}","ng extract-i18n --output-path src/locale","<source>Page header</source>\n<target>გვერდის სათაური</target>\n\n<source>educata project logo</source>\n<target>educata პროექტის ლოგო</target>","ng serve --o","ng build --localize","# example კომპონენტი\n\nexample.component.ts\nexample.component.html\nexample.component.css","ng generate component child","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@Component({\n  selector: \"app-child\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./child.component.html\",\n  styleUrl: \"./child.component.css\",\n})\nexport class ChildComponent {}","<!-- დამხურველი თეგით -->\n<app-child></app-child>\n<!-- შესაძლებელია void ტიპის თეგიც -->\n<app-child />","@Component({\n  selector: 'app-child',\n  standalone: true,\n  template: `<h1>Hello from ChildComponent!</h1>`,\n  styleUrl: \"./child.component.css\",\n})","@Component({\n  selector: 'app-child',\n  template: `<h1>Hello from ChildComponent!</h1>`,\n  styles:`\n    h1 {\n      color: red;\n    }\n  `,\n})","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  ngOnInit(): void {\n    console.log(\"კომპონენტი ინიციალიზირებულია!\");\n  }\n}","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  ngOnInit(): void {\n    console.log(\"კომპონენტი ინიციალიზირებულია!\");\n  }\n\n  ngOnDestroy(): void {\n    console.log(\"აპლიკაცია განადგურდა!\");\n  }\n}","npm install -g @angular/cli","ng v","ng new my-app","npm run start","ng serve","export class AppComponent {\n  title = \"Hello there\";\n  count = 0;\n}","<h1>{{ title }}</h1>\n<h2>The count is {{ count }}</h2>","<h1>{{ title }}</h1>\n<h2>The count is {{ count }}</h2>\n<button (click)=\"increment()\">Increment</button>","export class AppComponent {\n  title = \"Hello there\";\n  count = 0;\n\n  increment() {\n    this.count += 1;\n  }\n}","@NgModule({\n  declarations: [\n    // კომპონენტები, დირექტივები, და ფაიფები\n  ],\n  imports: [\n    // ბიბლიოთეკები და მოდულები\n  ],\n  providers: [\n    // სერვისები და პროვაიდერები\n  ],\n  bootstrap: [\n    /*\n      კომპონენტი, რომელსაც ანგულარი მოათავსებს index.html-ში აპლიკაციის გაშვების დროს.\n      იგივე კომპონენტი აუცილებელია, ეწეროს დეკლარაციის მასივშიც.\n    */\n  ],\n})\nexport class AppModule {}","ng new app-name --standalone=false","import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}","@NgModule({\n  declarations: [AppComponent, ExampleComponent, ExamplePipe, ExampleDirective],\n  imports: [BrowserModule, AppRoutingModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}","ng g m material","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatButtonToggleModule } from \"@angular/material/button-toggle\";\n\n@NgModule({\n  exports: [MatFormFieldModule, MatInputModule, MatButtonToggleModule],\n  imports: [CommonModule],\n})\nexport class MaterialModule {}","import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { AppComponent } from \"./app.component\";\n\nimport { MaterialModule } from \"./material/material.module\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, MaterialModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}","src/app\n├── admin/\n│   ├── admin.module.ts\n│   ├── dashboard/\n│   ├── product-manager/\n│   └── user-manager/\n├── app.component.css\n├── app.component.html\n├── app.component.spec.ts\n├── app.component.ts\n├── app.module.ts\n├── app-routing.module.ts\n└── shop/\n    ├── browse/\n    ├── cart/\n    └── shop.module.ts","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { UserManagerComponent } from \"./user-manager/user-manager.component\";\nimport { ProductManagerComponent } from \"./product-manager/product-manager.component\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { DashboardComponent } from \"./dashboard/dashboard.component\";\n\nconst adminRoutes: Routes = [\n  { path: \"product-manager\", component: ProductManagerComponent },\n  { path: \"user-manager\", component: UserManagerComponent },\n  { path: \"\", component: DashboardComponent, pathMatch: \"full\" },\n];\n\n@NgModule({\n  declarations: [\n    UserManagerComponent,\n    ProductManagerComponent,\n    DashboardComponent,\n  ],\n  imports: [CommonModule, RouterModule.forChild(adminRoutes)],\n})\nexport class AdminModule {}","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { BrowseComponent } from \"./browse/browse.component\";\nimport { CartComponent } from \"./cart/cart.component\";\nimport { Routes } from \"@angular/router\";\n\nconst shopRoutes: Routes = [\n  { path: \"cart\", component: CartComponent },\n  { path: \"\", component: BrowseComponent, pathMatch: \"full\" },\n];\n\n@NgModule({\n  declarations: [BrowseComponent, CartComponent],\n  imports: [CommonModule],\n})\nexport class ShopModule {}","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nconst routes: Routes = [\n  {\n    path: \"admin\",\n    loadChildren: () =>\n      import(\"./admin/admin.module\").then((m) => m.AdminModule),\n  },\n  {\n    path: \"shop\",\n    loadChildren: () => import(\"./shop/shop.module\").then((m) => m.ShopModule),\n  },\n  { path: \"\", redirectTo: \"shop\", pathMatch: \"full\" },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}","import { AppRoutingModule } from \"./app-routing.module\";\n@NgModule({\n  /* ... */\n  imports: [AppRoutingModule],\n})\nexport class AppModule {}","holiday = new Date(1918, 5, 26);","<p>Georgian independence day is {{ holiday | date }}</p>","<p>Georgian independence day is {{ holiday | date:\"dd/MM/yy\" }}</p>","title = \"Hello there\";","<p>{{ title | uppercase }}</p>\n<p>{{ title | lowercase }}</p>","<p>{{ holiday | date | uppercase }}</p>","budget = 50.335;","<p>Budget: {{ budget | currency }}</p>\n<!--output '$50.34'-->\n<p>Budget: {{ budget | currency:\"EUR\" }}</p>\n<!--output '€50.34'-->\n<p>Budget: {{ budget | currency:\"EUR\":\"code\" }}</p>\n<!-- output 'EUR50.34' -->","<p>{{1000000 | number}}</p>\n<!-- output '1,000,000' -->","<p>{{3.6 | number: '1.0-0'}}</p>\n<!--will output '4'-->\n\n<p>{{-3.6 | number:'1.0-0'}}</p>\n<!--will output '-4'-->","<p>{{ 0.259 | percent }}</p>\n<!--output '26%'-->","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrl: \"./app.component.css\",\n})\nexport class AppComponent {\n  filterKey = \"\";\n  items = [\n    \"Some example text here\",\n    \"Angular is an awesome framework\",\n    \"ZA WARUDOO\",\n    \"Learn Angular, it's worth it\",\n    \"On step at a time\",\n  ];\n}","<p>filter</p>\n<input type=\"text\" [(ngModel)]=\"filterKey\" />\n<hr />\n<p *ngFor=\"let item of items\">{{ item }}</p>","ng generate pipe my-filter","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: \"myFilter\",\n  standalone: true,\n})\nexport class MyFilterPipe implements PipeTransform {\n  transform(value: string[], filterKey: string): string[] {\n    return value.filter((item) =>\n      item.toLowerCase().includes(filterKey.toLowerCase())\n    );\n  }\n}","/* ... */\nimport { MyFilterPipe } from \"./my-filter.pipe\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule, MyFilterPipe],\n})\nexport class AppComponent {\n  /* ... */\n}","<p>filter</p>\n<input type=\"text\" [(ngModel)]=\"filterKey\" />\n<hr />\n<p *ngFor=\"let item of items | myFilter : filterKey\">{{ item }}</p>","ng generate component first","ng generate component second","import { Routes } from \"@angular/router\";\nimport { FirstComponent } from \"./first/first.component\";\nimport { SecondComponent } from \"./second/second.component\";\n\nexport const routes: Routes = [];","import { ApplicationConfig } from \"@angular/core\";\nimport { provideRouter } from \"@angular/router\";\n\nimport { routes } from \"./app.routes\";\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideRouter(routes)],\n};","import { Routes } from \"@angular/router\";\nimport { FirstComponent } from \"./first/first.component\";\nimport { SecondComponent } from \"./second/second.component\";\n\nconst routes: Routes = [\n  { path: \"first\", component: FirstComponent },\n  { path: \"second\", component: SecondComponent },\n];","<router-outlet></router-outlet>","import { RouterOutlet } from \"@angular/router\";\n\n@Component({\n  standalone: true,\n  imports: [RouterOutlet],\n  /* ... */\n})\nexport class AppComponent {}","<header>\n  <nav>\n    <ul>\n      <li><a routerLink=\"/first\" routerLinkActive=\"active\">First</a></li>\n      <li><a routerLink=\"/second\" routerLinkActive=\"active\"> Second</a></li>\n    </ul>\n  </nav>\n</header>\n<router-outlet></router-outlet>","import { RouterModule } from \"@angular/router\";\n@Component({\n  imports: [RouterModule],\n})","export const routes: Routes = [\n  { path: \"first\", component: FirstComponent },\n  { path: \"second\", component: SecondComponent },\n  { path: \"\", redirectTo: \"first\", pathMatch: \"full\" },\n];","ng g c page-not-found","<h1>Page Not Found</h1>","export const routes: Routes = [\n  { path: \"first\", component: FirstComponent },\n  { path: \"second\", component: SecondComponent },\n  { path: \"\", redirectTo: \"first\", pathMatch: \"full\" },\n  { path: \"**\", component: NotFoundComponent },\n];","export const routes: Routes = [\n  {\n    path: \"first\",\n    loadComponent: () =>\n      import(\"./first/first.component\").then((m) => m.FirstComponent),\n  },\n  {\n    path: \"second\",\n    loadComponent: () =>\n      import(\"./second/second.component\").then((m) => m.SecondComponent),\n  },\n  { path: \"\", redirectTo: \"first\", pathMatch: \"full\" },\n  { path: \"**\", component: NotFoundComponent },\n];","export default class FirstComponent {}","loadComponent: () => import(\"./first/first-component\");","import { Routes } from \"@angular/router\";\nimport { FirstComponent } from \"./first/first.component\";\nimport { SecondComponent } from \"./second/second.component\";\n\nexport const routes: Routes = [\n  { path: \"first\", component: FirstComponent },\n  { path: \"second\", component: SecondComponent },\n  { path: \"\", redirectTo: \"first\", pathMatch: \"full\" },\n];","<header>\n  <nav>\n    <ul>\n      <li><a routerLink=\"/first\" routerLinkActive=\"active\">First</a></li>\n      <li><a routerLink=\"/second\" routerLinkActive=\"active\"> Second</a></li>\n    </ul>\n  </nav>\n</header>\n<router-outlet></router-outlet>","ng g c second/child-one","ng g c second/child-two","import { Routes } from \"@angular/router\";\nimport { FirstComponent } from \"./first/first.component\";\nimport { ChildOneComponent } from \"./second/child-one/child-one.component\";\nimport { ChildTwoComponent } from \"./second/child-two/child-two.component\";\nimport { SecondComponent } from \"./second/second.component\";\n\nexport const routes: Routes = [\n  { path: \"first\", component: FirstComponent },\n  {\n    path: \"second\",\n    component: SecondComponent,\n    children: [\n      { path: \"child-one\", component: ChildOneComponent },\n      { path: \"child-two\", component: ChildTwoComponent },\n    ],\n  },\n  { path: \"\", redirectTo: \"first\", pathMatch: \"full\" },\n];","<p>second works!</p>\n<nav>\n  <ul>\n    <li><a routerLink=\"child-one\">Child One</a></li>\n    <li><a routerLink=\"child-two\">Child Two</a></li>\n  </ul>\n</nav>\n<router-outlet></router-outlet>","// admin/admin.routes.ts\n\nexport const ADMIN_ROUTES: Route[] = [\n  { path: \"home\", component: AdminHomeComponent },\n  { path: \"users\", component: AdminUsersComponent },\n  // ...\n];","// app.routes.ts\nexport const routes: Route[] = [\n  {\n    path: \"admin\",\n    loadChildren: () =>\n      import(\"./admin/routes\").then((mod) => mod.ADMIN_ROUTES),\n  },\n  // ...\n];","import { Injectable } from \"@angular/core\";\nimport { Product } from \"./product.model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProductsService {\n  private products: Product[] = [\n    {\n      id: 0,\n      name: \"Lenovo ThinkPad T14\",\n      price: 899,\n      description:\n        'Gen 2 14\" FHD (Intel 4-Core i5-1135G7, 16GB RAM, 512GB SSD, UHD Graphics) IPS Business Laptop, Backlit, Fingerprint, 2 x Thunderbolt 4, Webcam, 3-Year Warranty, Windows 11 Pro ',\n      image: \"https://example.com\",\n    },\n    {\n      id: 1,\n      name: \"Dell XPS 13 9310\",\n      price: 1200,\n      description:\n        \"Touchscreen Laptop - 13.4-inch UHD+ Display, Thin and Light, Intel Core i5-1135G7, 8GB LPDDR4x RAM, 512GB SSD, Intel Iris Xe, Killer Wi-Fi 6 with Dell Service, Win 11 Home - Silver \",\n      image: \"https://example.com\",\n    },\n    {\n      id: 2,\n      name: 'HP Envy 17.3\"',\n      price: 1246,\n      description:\n        \"FHD Touchscreen Laptop, Intel Core i7-1165G7, 64GB RAM, 2TB SSD, Backlit Keyboard, Intel Iris Xe Graphics, Fingerprint Reader, Webcam, Windows 11 Pro, Silver, 32GB USB Card \",\n      image: \"https://example.com\",\n    },\n  ];\n\n  getAllProducts() {\n    return this.products;\n  }\n\n  getProductById(id: number) {\n    return this.products.find((product) => product.id === id);\n  }\n}","export interface Product {\n  id: number;\n  name: string;\n  description: string;\n  image: string;\n  price: number;\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ProductsService } from \"../products.service\";\nimport { RouterLink } from \"@angular/router\";\nimport { Product } from \"../product.model\";\n\n@Component({\n  selector: \"app-products\",\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: \"./products.component.html\",\n  styleUrl: \"./products.component.css\",\n})\nexport class ProductsComponent {\n  products: Product[] = this.productsService.getAllProducts();\n\n  constructor(private productsService: ProductsService) {}\n}","<div class=\"container\">\n  <ul>\n    <li class=\"product\" *ngFor=\"let product of products\">\n      <h3>{{ product.name }}</h3>\n      <img [src]=\"product.image\" [alt]=\"product.name\" />\n      <p>{{ product.price | currency }}</p>\n      <a routerLink=\"/products/{{ product.id }}\">Details</a>\n    </li>\n  </ul>\n</div>","  sortBy: 'cheapest' | 'expensive' = 'cheapest';\n  sortOptions = ['cheapest', 'expensive'];","import { FormsModule } from \"@angular/forms\";\n\n@Component({\n  imports: [/* ... */ FormsModule],\n})","<div class=\"container\">\n  <label for=\"sort-select\">Sort by</label>\n  <select\n    id=\"sort-select\"\n    [ngModel]=\"sortBy\"\n    (ngModelChange)=\"changeSort($event)\"\n  >\n    <option *ngFor=\"let sortOption of sortOptions\" [value]=\"sortOption\">\n      {{ sortOption }}\n    </option>\n  </select>\n  <ul>\n    <li class=\"product\" *ngFor=\"let product of products\">\n      <h3>{{ product.name }}</h3>\n      <img [src]=\"product.image\" [alt]=\"product.name\" />\n      <p>{{ product.price | currency }}</p>\n      <a routerLink=\"/products/{{ product.id }}\">Details</a>\n    </li>\n  </ul>\n</div>","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ProductsService } from \"../products.service\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { Product } from \"../product.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FormsModule } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-products\",\n  standalone: true,\n  imports: [CommonModule, RouterLink, FormsModule],\n  templateUrl: \"./products.component.html\",\n  styleUrl: \"./products.component.css\",\n})\nexport class ProductsComponent {\n  sortBy: \"cheapest\" | \"expensive\" = \"cheapest\";\n  sortOptions = [\"cheapest\", \"expensive\"];\n  products: Product[] = [];\n\n  constructor(\n    private productsService: ProductsService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.route.queryParams\n      .pipe(takeUntilDestroyed())\n      .subscribe((queryParams) => {\n        const unsortedProducts = this.productsService.getAllProducts();\n        const sortBy = queryParams[\"sortBy\"];\n        this.sortBy = sortBy;\n        this.products = this.sortProducts(unsortedProducts, sortBy);\n      });\n  }\n\n  sortProducts(products: Product[], sortBy: \"cheapest\" | \"expensive\") {\n    if (sortBy === \"cheapest\") {\n      return products.sort((a, b) => a.price - b.price);\n    } else {\n      return products.sort((a, b) => b.price - a.price);\n    }\n  }\n\n  changeSort(newSortBy: string) {\n    this.router.navigate([\"products\"], {\n      queryParams: { sortBy: newSortBy },\n    });\n  }\n}","import { Routes } from \"@angular/router\";\nimport { ProductDetailsComponent } from \"./product-details/product-details.component\";\nimport { ProductsComponent } from \"./products/products.component\";\n\nexport const routes: Routes = [\n  { path: \"products\", component: ProductsComponent },\n  { path: \"products/:id\", component: ProductDetailsComponent },\n  { path: \"\", redirectTo: \"products\", pathMatch: \"full\" },\n];","export interface Product {\n  id: number;\n  name: string;\n  description: string;\n  image: string;\n  price: number;\n}","import { Injectable } from \"@angular/core\";\nimport { Product } from \"./product.model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProductsService {\n  private products: Product[] = [\n    {\n      id: 0,\n      name: \"Lenovo ThinkPad T14\",\n      price: 899,\n      description:\n        'Gen 2 14\" FHD (Intel 4-Core i5-1135G7, 16GB RAM, 512GB SSD, UHD Graphics) IPS Business Laptop, Backlit, Fingerprint, 2 x Thunderbolt 4, Webcam, 3-Year Warranty, Windows 11 Pro ',\n      image: \"https://example.com\",\n    },\n    {\n      id: 1,\n      name: \"Dell XPS 13 9310\",\n      price: 1200,\n      description:\n        \"Touchscreen Laptop - 13.4-inch UHD+ Display, Thin and Light, Intel Core i5-1135G7, 8GB LPDDR4x RAM, 512GB SSD, Intel Iris Xe, Killer Wi-Fi 6 with Dell Service, Win 11 Home - Silver \",\n      image: \"https://example.com\",\n    },\n    {\n      id: 2,\n      name: 'HP Envy 17.3\"',\n      price: 1246,\n      description:\n        \"FHD Touchscreen Laptop, Intel Core i7-1165G7, 64GB RAM, 2TB SSD, Backlit Keyboard, Intel Iris Xe Graphics, Fingerprint Reader, Webcam, Windows 11 Pro, Silver, 32GB USB Card \",\n      image: \"https://example.com\",\n    },\n  ];\n\n  getAllProducts() {\n    return this.products;\n  }\n\n  getProductById(id: number) {\n    return this.products.find((product) => product.id === id);\n  }\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ProductsService } from \"../products.service\";\nimport { RouterLink } from \"@angular/router\";\n\n@Component({\n  selector: \"app-products\",\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: \"./products.component.html\",\n  styleUrls: [\"./products.component.css\"],\n})\nexport class ProductsComponent {\n  constructor(public productsService: ProductsService) {}\n}","<div class=\"container\">\n  <ul>\n    <li\n      class=\"product\"\n      *ngFor=\"let product of productsService.getAllProducts()\"\n    >\n      <h3>{{ product.name }}</h3>\n      <img [src]=\"product.image\" [alt]=\"product.name\" />\n      <p>{{ product.price | currency }}</p>\n      <a routerLink=\"/products/{{ product.id }}\">Details</a>\n    </li>\n  </ul>\n</div>","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Product } from \"../product.model\";\nimport { ProductsService } from \"../products.service\";\n\n@Component({\n  selector: \"app-product-details\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./product-details.component.html\",\n  styleUrls: [\"./product-details.component.css\"],\n})\nexport class ProductDetailsComponent {\n  product!: Product;\n\n  constructor(\n    private productsService: ProductsService,\n    private route: ActivatedRoute\n  ) {\n    this.route.params.subscribe((params) => {\n      const product = this.productsService.getProductById(+params[\"id\"]);\n      if (product) {\n        this.product = product;\n      }\n    });\n  }\n}","<div class=\"container\">\n  <a routerLink=\"/products\">Back to products</a>\n  <div *ngIf=\"product\">\n    <h1>{{ product.name }}</h1>\n    <img [src]=\"product.image\" [alt]=\"product.name\" />\n    <h3>{{ product.price | currency }}</h3>\n    <p>{{ product.description }}</p>\n  </div>\n  <div *ngIf=\"!product\">\n    <h1>Error, product not found.</h1>\n  </div>\n</div>","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Product } from \"../product.model\";\nimport { ProductsService } from \"../products.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  selector: \"app-product-details\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./product-details.component.html\",\n  styleUrls: [\"./product-details.component.css\"],\n})\nexport class ProductDetailsComponent {\n  product!: Product;\n\n  constructor(\n    private productsService: ProductsService,\n    private route: ActivatedRoute\n  ) {\n    this.route.params.pipe(takeUntilDestroyed()).subscribe((params) => {\n      const product = this.productsService.getProductById(+params[\"id\"]);\n      if (product) {\n        this.product = product;\n      }\n    });\n  }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { fromEvent } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  // create an observable of mouse clicks on document\n  myObservable$ = fromEvent(document, \"click\");\n\n  ngOnInit(): void {}\n}","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Subscription, fromEvent } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  // create an observable of mouse clicks on document\n  myObservable$ = fromEvent(document, \"click\");\n\n  ngOnInit(): void {\n    // When component is initialized, start reacting\n    this.myObservable$.subscribe((event) => {\n      console.log(event);\n    });\n  }\n}","this.http.get(\"https://example.com\").subscribe((response) => {\n  console.log(response);\n});","// instead of a function, we will pass an object with next, error, and complete methods\nmyObservable.subscribe({\n  // on successful emissions\n  next: (event) => console.log(event),\n  // on errors\n  error: (error) => console.log(error),\n  // called once on completion\n  complete: () => console.log(\"complete!\"),\n});","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Subscription, fromEvent } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  // create an observable of mouse clicks on document\n  myObservable$ = fromEvent(document, \"click\");\n  mySubscription$!: Subscription;\n  mySubscriptionTwo$!: Subscription;\n\n  ngOnInit(): void {\n    this.mySubscription$ = this.myObservable$.subscribe((event) => {\n      console.log(\"subscription one\", event);\n    });\n\n    this.mySubscriptionTwo$ = this.myObservable$.subscribe((event) => {\n      console.log(\"subscription two\", event);\n    });\n  }\n}","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Subscription, fromEvent } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  // create an observable of mouse clicks on document\n  myObservable$ = fromEvent(document, \"click\");\n  mySubscription$!: Subscription;\n  mySubscriptionTwo$!: Subscription;\n\n  ngOnInit(): void {\n    this.mySubscription$ = this.myObservable$.subscribe((event) => {\n      console.log(\"subscription one\", event);\n    });\n\n    this.mySubscriptionTwo$ = this.myObservable$.subscribe((event) => {\n      console.log(\"subscription two\", event);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.mySubscription$.unsubscribe();\n    this.mySubscriptionTwo$.unsubscribe();\n  }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { fromEvent } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  // create an observable of mouse clicks on document\n  myObservable$ = fromEvent(document, \"click\");\n\n  ngOnInit(): void {\n    // When component is initialized, start reacting\n    this.myObservable$.subscribe((event) => {\n      console.log(event);\n    });\n  }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { from } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  // emit array as a sequence of values\n  numbers$ = from([1, 2, 3, 4, 5]);\n\n  ngOnInit(): void {\n    // listen to the emission and log each value\n    this.numbers$.subscribe((val) => console.log(val));\n  }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { of } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  //emits values of any type\n  values$ = of({ name: \"Brian\" }, [1, 2, 3], function hello() {\n    return \"Hello\";\n  });\n\n  ngOnInit(): void {\n    //output: {name: 'Brian'}, [1,2,3], function hello() { return 'Hello' }\n    this.values$.subscribe((val) => console.log(val));\n  }\n}","someObservable = source.pipe(/* operators go here */);","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { fromEvent, map } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  // Create an observable that emits mousemove events\n  mouseMove$ = fromEvent<MouseEvent>(document, \"mousemove\");\n\n  // Create a new observable that emits mouse coordinates,\n  // based on mouseMove$ observable.\n  mouseCoordinates$ = this.mouseMove$.pipe(\n    map((event) => {\n      if (event) {\n        const coordinates = {\n          x: event.pageX,\n          y: event.pageY,\n        };\n        return coordinates;\n      } else {\n        return null;\n      }\n    })\n  );\n\n  ngOnInit(): void {\n    // Subscribe and react to emissions of mouseCoordinates$\n    this.mouseCoordinates$.subscribe((coordinates) => {\n      if (coordinates) {\n        console.log(coordinates.x, coordinates.y);\n      }\n    });\n  }\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { fromEvent, map } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  // Create an observable that emits mousemove events\n  mouseMove$ = fromEvent<MouseEvent>(document, \"mousemove\");\n\n  // Create a new observable that emits mouse coordinates,\n  // based on mouseMove$ observable.\n  mouseCoordinates$ = this.mouseMove$.pipe(\n    map((event) => {\n      if (event) {\n        const coordinates = {\n          x: event.pageX,\n          y: event.pageY,\n        };\n        return coordinates;\n      } else {\n        return null;\n      }\n    })\n  );\n}","<h1>{{ mouseCoordinates$ | async | json }}</h1>","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { fromEvent, map, tap } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  // Create a observable that emits mousemove events\n  mouseMove$ = fromEvent<MouseEvent>(document, \"mousemove\");\n\n  // Create an new observable that emits mouse coordinates,\n  // based on mouseMove$ observable.\n  mouseCoordinates$ = this.mouseMove$.pipe(\n    map((event) => {\n      if (event) {\n        const coordinates = {\n          x: event.pageX,\n          y: event.pageY,\n        };\n        return coordinates;\n      } else {\n        return null;\n      }\n    }),\n    tap((coordinates) => {\n      console.log(coordinates);\n    })\n  );\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { fromEvent, map, tap, filter } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  // Create an observable that emits mousemove events\n  mouseMove$ = fromEvent<MouseEvent>(document, \"mousemove\");\n\n  // Create an new observable that emits mouse coordinates,\n  // based on mouseEventSource observable.\n  mouseCoordinates$ = this.mouseMove$.pipe(\n    map((event) => {\n      if (event) {\n        const coordinates = {\n          x: event.pageX,\n          y: event.pageY,\n        };\n        return coordinates;\n      } else {\n        return null;\n      }\n    }),\n    // only emit if these conditions are met\n    filter((coordinates) => coordinates !== null && coordinates.x > 300),\n    tap((coordinates) => {\n      console.log(coordinates);\n    })\n  );\n}","import { ProductsComponent } from \"./products/products.component\";\nimport { Routes } from \"@angular/router\";\n\nexport const routes: Routes = [\n  { path: \"products/:id\", component: ProductsComponent },\n];","import { ApplicationConfig } from \"@angular/core\";\nimport { provideHttpClient } from \"@angular/common/http\";\n\nexport const appConfig: ApplicationConfig = {\n  providers: [/* ... */ provideHttpClient()],","<h1>{{ mouseCoordinates$ | async | json }}</h1>\n<router-outlet></router-outlet>","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { switchMap } from \"rxjs\";\n\n@Component({\n  selector: \"app-products\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./products.component.html\",\n  styleUrls: [\"./products.component.css\"],\n})\nexport class ProductsComponent {\n  product$ = this.route.params.pipe(\n    switchMap((params) => this.getProductById(params[\"id\"]))\n  );\n  constructor(private http: HttpClient, private route: ActivatedRoute) {}\n\n  getProductById(id: string) {\n    return this.http.get<{ title: string; description: string; price: string }>(\n      \"https://dummyjson.com/products/\" + id\n    );\n  }\n}","<div *ngIf=\"product$ | async as product\">\n  <h1>{{ product.title }}</h1>\n  <p>{{ product.description }}</p>\n  <p>{{ product.price }}</p>\n</div>","import { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n/* ... */\nexport class AppComponent {\n  constructor(private route: ActivatedRoute) {\n    this.route.params\n      .pipe(takeUntilDestroyed())\n      .subscribe((params) => console.log(params));\n  }\n}","import { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  mySubject$ = new Subject<string>();\n\n  onClick() {\n    this.mySubject$.next(\"hello!\");\n  }\n}","<button (click)=\"onClick()\">Click me</button>","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  mySubject$ = new Subject<string>();\n\n  ngOnInit(): void {\n    this.mySubject$.subscribe((result) => {\n      console.log(result);\n    });\n  }\n\n  onClick() {\n    this.mySubject$.next(\"hello!\");\n  }\n}","<button (click)=\"onClick()\">Click me</button>\n<h1>{{ mySubject$ | async }}</h1>","import { Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { BehaviorSubject } from \"rxjs\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  mySubject$ = new BehaviorSubject<string>(\"Initial Value\");\n\n  ngOnInit(): void {\n    this.mySubject$.subscribe((result) => {\n      console.log(result);\n    });\n\n    setTimeout(() => {\n      this.mySubject$.subscribe((result) => {\n        console.log(\"Delayed subscription\", result);\n      });\n    }, 5000);\n  }\n\n  onClick() {\n    this.mySubject$.next(\"hello!\");\n  }\n}","count = signal(0);","<button>Count: {{ count() }}</button>","<button (click)=\"count.set(3)\">Count: {{ count() }}</button>","count.update((value) => value + 1)","@Component({\n  template: `\n    <button (click)=\"increment()\">Count: {{ count() }}</button>\n    <p>Is even: {{ isCountEven() }}</p>\n  `,\n})\nexport class AppComponent {\n  count = signal(0);\n  isCountEven = computed(() => this.count() % 2 === 0);\n\n  increment() {\n    this.count.update((value) => value + 1);\n  }","export class AppComponent {\n  count = signal(0);\n\n  constructor() {\n    effect(() => {\n        console.log(`The count was updated to ${this.count()}`)\n    })\n  }\n}","@Component({\n  standalone: true,\n  selector: \"image-grid\",\n  imports: [ImageGridComponent],\n  templateUrl: \"./image-grid.component.ts\",\n})\nexport class ImageGridComponent {\n  // component logic\n}","@Component({\n  standalone: true,\n  selector: \"photo-gallery\",\n  imports: [ImageGridComponent],\n  template: ` ... <image-grid [images]=\"imageList\"></image-grid> `,\n})\nexport class PhotoGalleryComponent {\n  // component logic\n}","@Component({\n  standalone: true,\n  selector: \"photo-gallery\",\n  // an existing module is imported directly into a standalone component\n  imports: [MatButtonModule],\n  template: `\n    ...\n    <button mat-button>Next Page</button>\n  `,\n})\nexport class PhotoGalleryComponent {\n  // logic\n}","@NgModule({\n  declarations: [AlbumComponent],\n  exports: [AlbumComponent],\n  imports: [PhotoGalleryComponent],\n})\nexport class AlbumModule {}","import { bootstrapApplication } from \"@angular/platform-browser\";\nimport { PhotoAppComponent } from \"./app/photo.app.component\";\n\nbootstrapApplication(PhotoAppComponent);","import { LibraryModule } from \"ngmodule-based-library\";\n\nbootstrapApplication(PhotoAppComponent, {\n  providers: [importProvidersFrom(LibraryModule.forRoot())],\n});","bootstrapApplication(PhotoAppComponent, {\n  providers: [\n    {\n      provide: BACKEND_URL,\n      useValue: \"https://photoapp.looknongmodules.com/api\",\n    },\n    // ...\n  ],\n});","export const ROUTES: Route[] = [\n  { path: \"admin\", component: AdminPanelComponent },\n  // ... other routes\n];","import { ROUTES } from \"./app/admin/admin.routes.ts\";\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideRouter([ROUTES]),\n    // ...\n  ],\n});","export const ROUTES: Route[] = [\n  {\n    path: \"admin\",\n    loadComponent: () =>\n      import(\"./admin/panel.component\").then((mod) => mod.AdminPanelComponent),\n  },\n  // ...\n];","// In the main application:\nexport const ROUTES: Route[] = [\n  {\n    path: \"admin\",\n    loadChildren: () =>\n      import(\"./admin/routes\").then((mod) => mod.ADMIN_ROUTES),\n  },\n  // ...\n];\n\n// In admin/routes.ts:\nexport const ADMIN_ROUTES: Route[] = [\n  { path: \"home\", component: AdminHomeComponent },\n  { path: \"users\", component: AdminUsersComponent },\n  // ...\n];","export const ROUTES: Route[] = [\n  {\n    path: \"admin\",\n    providers: [AdminService, { provide: ADMIN_API_KEY, useValue: \"12345\" }],\n    children: [\n      { path: \"users\", component: AdminUsersComponent },\n      { path: \"teams\", component: AdminTeamsComponent },\n    ],\n  },\n  // ... other application routes that don't\n  //     have access to ADMIN_API_KEY or AdminService.\n];","  public addItem(title: string) {\n    const itemToAdd = {\n      title: title,\n      done: false,\n    };\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    this.http\n      .post<{ id: number }>(this.url, itemToAdd, {\n        headers,\n      })\n      .pipe(\n        tap((response) => {\n          const newItem = {\n            id: response.id,\n            ...itemToAdd,\n          };\n          this.todos$.next([...this.todos$.value, newItem]);\n        })\n      )\n      .subscribe();\n  }","import { ChangeDetectionStrategy, Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { TodoItem, TodoService } from \"./todo.service\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  newItemTitle = \"\";\n\n  todos$ = this.todoService.todos;\n\n  constructor(private todoService: TodoService) {}\n\n  ngOnInit(): void {\n    this.todoService.init();\n  }\n\n  addItem() {\n    this.todoService.addItem(this.newItemTitle);\n    this.newItemTitle = \"\";\n  }\n}","<div class=\"row mb-2 gap-2 p-2\">\n  <input\n    type=\"text\"\n    placeholder=\"Add a new item...\"\n    [(ngModel)]=\"newItemTitle\"\n    class=\"col-12\"\n  />\n  <button\n    class=\"btn btn-primary col-12\"\n    [disabled]=\"!newItemTitle\"\n    (click)=\"addItem()\"\n  >\n    <span>Add</span>\n  </button>\n</div>","ng new todo-rxjs","<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Todo Rxjs</title>\n    <base href=\"/\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n    <link\n      href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css\"\n      rel=\"stylesheet\"\n      integrity=\"sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ\"\n      crossorigin=\"anonymous\"\n    />\n  </head>\n  <body>\n    <app-root></app-root>\n    <script\n      src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.min.js\"\n      integrity=\"sha384-Y4oOpwW3duJdCWv5ly8SCFYWqFDsfob/3GkgExXKV4idmbt98QcxXYs9UoXAB7BZ\"\n      crossorigin=\"anonymous\"\n    ></script>\n  </body>\n</html>","import { ApplicationConfig } from \"@angular/core\";\nimport { provideHttpClient } from \"@angular/common/http\";\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideHttpClient()],\n};","import { FormsModule } from \"@angular/forms\";\n@Component({\n  imports: [/* ... */ FormsModule]\n})","npm install json-server","{\n  \"todos\": [\n    {\n      \"title\": \"Walk the dog\",\n      \"done\": false,\n      \"id\": 1\n    },\n    {\n      \"title\": \"Call grandma\",\n      \"done\": true,\n      \"id\": 2\n    },\n    {\n      \"title\": \"Buy groceries\",\n      \"done\": false,\n      \"id\": 3\n    }\n  ]\n}","  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\",\n    \"server\": \"json-server database.json\"\n  },","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, catchError, of, tap } from \"rxjs\";\n\nexport interface TodoItem {\n  id: number;\n  title: string;\n  done: boolean;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class TodoService {\n  private url = \"http://localhost:3000/todos\";\n\n  private todos$ = new BehaviorSubject<TodoItem[]>([]);\n\n  constructor(private http: HttpClient) {}\n\n  get todos() {\n    return this.todos$.asObservable();\n  }\n\n  public init() {\n    this.http\n      .get<TodoItem[]>(this.url)\n      .pipe(\n        tap((todos) => {\n          this.todos$.next(todos);\n        })\n      )\n      .subscribe();\n  }\n}","import { ChangeDetectionStrategy, Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { TodoItem, TodoService } from \"./todo.service\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  todos$ = this.todoService.todos;\n\n  constructor(private todoService: TodoService) {}\n\n  ngOnInit(): void {\n    this.todoService.init();\n  }\n}","<div class=\"container\" style=\"max-width: 500px\">\n  <h1>Your List:</h1>\n  <ul class=\"list-group\" *ngIf=\"todos$ | async as todos\">\n    <p *ngIf=\"todos.length === 0\">Your list will show here...</p>\n    <li\n      class=\"list-group-item d-flex justify-content-between align-items-center\"\n      *ngFor=\"let item of todos\"\n    >\n      <div class=\"d-flex align-items-center\">\n        <input type=\"checkbox\" [checked]=\"item.done\" />\n        <span class=\"ms-2\">{{ item.title }}</span>\n      </div>\n    </li>\n  </ul>\n</div>","import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, catchError, of, tap } from \"rxjs\";\n\nexport interface TodoItem {\n  id: number;\n  title: string;\n  done: boolean;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class TodoService {\n  private url = \"http://localhost:3000/todos\";\n\n  private todos$ = new BehaviorSubject<TodoItem[]>([]);\n  private todosLoading$ = new BehaviorSubject<boolean>(false);\n  private error$ = new BehaviorSubject<HttpErrorResponse | null>(null);\n\n  constructor(private http: HttpClient) {}\n\n  get error() {\n    return (\n      this.error$\n        .asObservable()\n        // If error has emitted a value, loading has finished\n        .pipe(tap(() => this.todosLoading$.next(false)))\n    );\n  }\n\n  get loading() {\n    return (\n      this.todosLoading$\n        .asObservable()\n        // If loading state is retriggered, reset the error stream\n        .pipe(tap((loading) => loading && this.error$.next(null)))\n    );\n  }\n\n  get todos() {\n    return (\n      this.todos$\n        .asObservable()\n        // Every time this observable emits value, it means that loading has finished\n        .pipe(tap(() => this.todosLoading$.next(false)))\n    );\n  }\n\n  public init() {\n    this.todosLoading$.next(true);\n\n    this.http\n      .get<TodoItem[]>(this.url)\n      .pipe(\n        tap((todos) => {\n          this.todos$.next(todos);\n        }),\n        catchError((error: HttpErrorResponse) => {\n          this.error$.next(error);\n          return of(null);\n        })\n      )\n      .subscribe();\n  }\n\n  public addItem(title: string) {\n    this.todosLoading$.next(true);\n\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\",\n    });\n\n    const itemToAdd = {\n      title: title,\n      done: false,\n    };\n\n    this.http\n      .post<{ id: number }>(this.url, itemToAdd, {\n        headers,\n      })\n      .pipe(\n        tap((response) => {\n          const newItem = {\n            id: response.id,\n            ...itemToAdd,\n          };\n          this.todos$.next([...this.todos$.value, newItem]);\n        }),\n        catchError((error: HttpErrorResponse) => {\n          this.error$.next(error);\n          return of(null);\n        })\n      )\n      .subscribe();\n  }\n}","import { ChangeDetectionStrategy, Component, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { combineLatest, map } from \"rxjs\";\nimport { TodoItem, TodoService } from \"./todo.service\";\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  newItemTitle = \"\";\n\n  todos$ = this.todoService.todos;\n  loading$ = this.todoService.loading;\n  error$ = this.todoService.error;\n\n  vm$ = combineLatest([this.todos$, this.loading$, this.error$]).pipe(\n    map(([todos, loading, error]) => ({ todos, loading, error }))\n  );\n\n  constructor(private todoService: TodoService) {}\n\n  ngOnInit(): void {\n    this.todoService.init();\n  }\n\n  addItem() {\n    this.todoService.addItem(this.newItemTitle);\n    this.newItemTitle = \"\";\n  }\n}","<div *ngIf=\"vm$ | async as vm\" class=\"container\" style=\"max-width: 500px\">\n  <h1>Your List:</h1>\n  <div class=\"row mb-2 gap-2 p-2\">\n    <input\n      type=\"text\"\n      placeholder=\"Add a new item...\"\n      [(ngModel)]=\"newItemTitle\"\n      class=\"col-12\"\n    />\n    <button\n      class=\"btn btn-primary col-12\"\n      [disabled]=\"!newItemTitle\"\n      (click)=\"addItem()\"\n    >\n      <span *ngIf=\"!vm.loading\">Add</span>\n      <div\n        class=\"spinner-border spinner-border-sm\"\n        role=\"status\"\n        *ngIf=\"vm.loading\"\n      >\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n    </button>\n  </div>\n  <ul class=\"list-group\">\n    <div class=\"card text-bg-danger\" *ngIf=\"vm.error\">\n      <div class=\"card-body\">\n        <p>Error: {{ vm.error.message }}</p>\n      </div>\n    </div>\n    <p *ngIf=\"vm.todos.length === 0\">Your list will show here...</p>\n    <li\n      class=\"list-group-item d-flex justify-content-between align-items-center\"\n      *ngFor=\"let item of vm.todos\"\n    >\n      <div class=\"d-flex align-items-center\">\n        <input type=\"checkbox\" [checked]=\"item.done\" />\n        <span class=\"ms-2\">{{ item.title }}</span>\n      </div>\n    </li>\n  </ul>\n</div>"," public deleteItem(id: number) {\n    this.todosLoading$.next(true);\n\n    this.http\n      .delete<void>(`${this.url}/${id}`)\n      .pipe(\n        tap(() => {\n          this.todos$.next(this.todos$.value.filter((item) => item.id !== id));\n        }),\n        catchError((error: HttpErrorResponse) => {\n          this.error$.next(error);\n          return of(null);\n        })\n      )\n      .subscribe();\n  }\n\n  public updateItem(updatedItem: TodoItem) {\n    this.todosLoading$.next(true);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    this.http\n      .patch<TodoItem>(`${this.url}/${updatedItem.id}`, updatedItem, {\n        headers,\n      })\n      .pipe(\n        tap((updatedItem) => {\n          const updatedList = this.todos$.value.map((item) =>\n            item.id === updatedItem.id ? updatedItem : item\n          );\n          this.todos$.next(updatedList);\n        }),\n        catchError((error: HttpErrorResponse) => {\n          this.error$.next(error);\n          return of(null);\n        })\n      )\n      .subscribe();\n  }","  changeDone(itemToChange: TodoItem) {\n    const updatedItem = {\n      ...itemToChange,\n      done: !itemToChange.done,\n    };\n\n    this.todoService.updateItem(updatedItem);\n  }\n\n  deleteItem(id: number) {\n    this.todoService.deleteItem(id);\n  }","<li\n  class=\"list-group-item d-flex justify-content-between align-items-center\"\n  *ngFor=\"let item of vm.todos\"\n>\n  <div class=\"d-flex align-items-center\">\n    <input type=\"checkbox\" [checked]=\"item.done\" (click)=\"changeDone(item)\" />\n    <span class=\"ms-2\">{{ item.title }}</span>\n  </div>\n  <button class=\"btn btn-danger\" (click)=\"deleteItem(item.id)\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      class=\"bi bi-trash3-fill\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        d=\"M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5Zm-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5ZM4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06Zm6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528ZM8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5Z\"\n      />\n    </svg>\n  </button>\n</li>","import { TestBed } from \"@angular/core/testing\";\nimport { AppComponent } from \"./app.component\";\n\ndescribe(\"AppComponent\", () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [AppComponent],\n    }).compileComponents();\n  });\n\n  it(\"should create the app\", () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it(`should have as title 'tests'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual(\"tests\");\n  });\n\n  it(\"should render title\", () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement as HTMLElement;\n    expect(compiled.querySelector(\".content span\")?.textContent).toContain(\n      \"tests app is running!\"\n    );\n  });\n});","npm run test","it(\"should change title with new value\", () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  app.changeTitle();\n  expect(app.title).toEqual(\"changed\");\n});","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"tests\";\n\n  changeTitle() {\n    this.title = \"changed\";\n  }\n}"]}